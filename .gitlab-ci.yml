image: fdulwich/oskar-ci:cuda-11.3-1

stages:
  - build
  - test
  - doc
  - publish
  - prepost

build-debug:
  stage: build
  tags: [k8srunner-gpu]
  before_script:
    - mkdir debug
    - cd debug
    - cmake ../ -DCOVERAGE_REPORT=ON -DCUDA_ARCH=6.1
  script:
    - make -j
  artifacts:
    paths:
      - debug
    exclude:
      - debug/*.o
    expire_in: 3600 seconds

build-release:
  stage: build
  tags: [k8srunner-gpu]
  before_script:
    - mkdir release
    - cd release
    - cmake ../ -DCUDA_ARCH=6.1
  script:
    - make -j
  artifacts:
    paths:
      - release
    exclude:
      - release/*.o
    expire_in: 3600 seconds

test-coverage:
  stage: test
  dependencies:
    - build-debug
  tags: [k8srunner-gpu]
  before_script:
    - nvidia-smi
    - cd debug
  script:
    - make coverage
    - make coverage_xml
  artifacts:
    paths:
      - debug/coverage
      - debug/coverage_xml.xml
    expire_in: 3600 seconds

test-release:
  stage: test
  dependencies:
    - build-release
  tags: [k8srunner-gpu]
  before_script:
    - nvidia-smi
    - cd release
  script:
    - ctest --output-on-failure

build-doxygen:
  stage: doc
  image: ubuntu:18.04 # Use Doxygen version 1.8.13 for compatibility.
  before_script:
    - >
      apt-get update && DEBIAN_FRONTEND=noninteractive
      apt-get -qq install build-essential cmake doxygen doxygen-latex texlive
    - mkdir build-doxygen && cd build-doxygen
    - cmake ..
  script:
    - make doc_single
  artifacts:
    paths:
      - build-doxygen
    expire_in: 3600 seconds
#  rules:
#    - if: '$CI_COMMIT_TAG'

docker-release:
  stage: publish
  image: docker:20.10.7
  services:
    - docker:20.10.7-dind
  variables:
    GIT_VERSION: $CI_COMMIT_SHORT_SHA
  before_script:
    - apk add make git
    - cd docker
    - echo $CAR_OCI_REGISTRY_USERNAME
    - echo $CI_COMMIT_TAG
    - echo $CAR_OCI_REGISTRY_PASSWORD | docker login --username $CAR_OCI_REGISTRY_USERNAME --password-stdin $CAR_OCI_REGISTRY_HOST
  script:
    - docker build -t artefact.skao.int/oskar-base-dep oskar-base-dep/
    - docker build -t artefact.skao.int/oskar-base -t artefact.skao.int/oskar-base:$CI_COMMIT_TAG oskar-base/
    - docker build -t artefact.skao.int/oskar-python3 -t artefact.skao.int/oskar-python3:$CI_COMMIT_TAG oskar-python3/
    - docker push artefact.skao.int/oskar-python3:$CI_COMMIT_TAG
  rules:
    - if: '$CI_COMMIT_TAG'

pages:
  stage: publish
  dependencies:
    - build-doxygen
    - test-coverage
  script:
    - rm -rf public
    - mkdir -p public
    - mkdir -p public/pdf
    - mv debug/coverage public/
    - cp build-doxygen/doc/*.pdf public/pdf/
  artifacts:
    paths:
      - public
    expire_in: never

prepare-metrics:
  stage: prepost
  dependencies:
    - test-coverage
  script:
    - mkdir -p build/reports
    - cp debug/coverage_xml.xml build/reports/code-coverage.xml
  artifacts:
    paths:
      - build
    reports:
      cobertura: build/reports/code-coverage.xml
    expire_in: never

# Create Gitlab CI badges from CI metrics
# https://developer.skao.int/en/latest/tools/continuousintegration.html#automated-collection-of-ci-health-metrics-as-part-of-the-ci-pipeline
include:
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/post_step.yml'
