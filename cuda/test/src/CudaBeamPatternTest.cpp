/*
 * Copyright (c) 2011, The University of Oxford
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name of the University of Oxford nor the names of its
 *    contributors may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "cuda/test/CudaBeamPatternTest.h"
#include "cuda/oskar_cuda_bp2hc.h"
#include "cuda/oskar_cuda_bp2phc.h"
#include "math/oskar_SphericalPositions.h"
#include "math/oskar_GridPositions.h"
#include "math/oskar_Matrix3.h"
#include <cmath>
#include <vector>

#ifndef M_PI
#define M_PI 3.1415926535
#endif

#define DEG2RAD (M_PI / 180.0)
#define RAD2DEG (180.0 / M_PI)
#define C_0 299792458.0

#define TIMER_ENABLE 1
#include "utility/timer.h"

// Register the test class.
CPPUNIT_TEST_SUITE_REGISTRATION(CudaBeamPatternTest);

/**
 * @details
 * Sets up the context before running each test method.
 */
void CudaBeamPatternTest::setUp()
{
}

/**
 * @details
 * Clean up routine called after each test is run.
 */
void CudaBeamPatternTest::tearDown()
{
}

/**
 * @details
 * Tests beam pattern creation using CUDA.
 */
void CudaBeamPatternTest::test_regular()
{
    // Generate square array of antenna positions.
    const int na = 100;
    const float sep = 0.15; // Antenna separation, metres.
    const float halfArraySize = (na - 1) * sep / 2.0;
    std::vector<float> ax(na * na), ay(na * na); // Antenna (x,y) positions.
    for (int x = 0; x < na; ++x) {
        for (int y = 0; y < na; ++y) {
            int i = y + x * na;
            ax[i] = x * sep - halfArraySize;
            ay[i] = y * sep - halfArraySize;
        }
    }

    // Generate test source positions.
    float beamAz = 0;  // Beam azimuth.
    float beamEl = 50; // Beam elevation.
    oskar_SphericalPositions<float> pos (
            beamAz * DEG2RAD, beamEl * DEG2RAD, // Centre.
            30 * DEG2RAD, 30 * DEG2RAD, // Half-widths.
            0.2 * DEG2RAD, 0.2 * DEG2RAD); // Spacings.
    unsigned ns = pos.generate(0, 0); // No. of sources.
    std::vector<float> slon(ns), slat(ns);
    pos.generate(&slon[0], &slat[0]);

    // Call CUDA beam pattern generator.
    float freq = 1e9; // Observing frequency, Hertz.
    std::vector<float> image(ns * 2); // Beam pattern real & imaginary values.
    TIMER_START
    oskar_cudaf_bp2hc(na*na, &ax[0], &ay[0], ns, &slon[0],
            &slat[0], beamAz * DEG2RAD, beamEl * DEG2RAD,
            2 * M_PI * (freq / C_0), 0, 0, 1.0f, 0.0f, &image[0]);
    TIMER_STOP("Finished beam pattern (%d element regular array, %d points)",
            na*na, ns);

    // Write image data to file.
    FILE* file = fopen("beamPattern2dHorizontalGeometricRegular.dat", "w");
    for (unsigned s = 0; s < ns; ++s) {
        fprintf(file, "%12.3f%12.3f%16.4e%16.4e\n",
                slon[s] * RAD2DEG, slat[s] * RAD2DEG, image[2*s], image[2*s+1]);
    }
    fclose(file);
}

/**
 * @details
 * Tests beam pattern creation using CUDA.
 */
void CudaBeamPatternTest::test_superStation()
{
    // Generate array of antenna positions.
    int seed = 10;
    float radius = 21.2; // metres.
    float xs = 0.375, ys = 0.375, xe = 0.0, ye = 0.0; // separations, errors.

    int na = oskar_GridPositions::circular(seed, radius, xs, ys, xe, ye);
    printf("Super-station contains %d antennas.\n", na);
    std::vector<float> ax(na), ay(na), az(na); // Antenna positions.
    oskar_GridPositions::circular(seed, radius, xs, ys, xe, ye, &ax[0], &ay[0]);

    // Rotate around z.
    float matrix[9];
    Matrix3::rotationZ(matrix, float(0 * DEG2RAD));
    Matrix3::transformPoints(matrix, na, &ax[0], &ay[0], &az[0]);

    // Write antenna positions to file.
    FILE* file = fopen("arraySuperStation.dat", "w");
    for (int a = 0; a < na; ++a) {
        fprintf(file, "%12.3f%12.3f\n", ax[a], ay[a]);
    }
    fclose(file);

    // Set beam direction.
    float beamAz = 0;  // Beam azimuth.
    float beamEl = 90; // Beam elevation.

    // Generate test source positions for a square image.
//    SphericalPositions<float> pos (
//            beamAz * DEG2RAD, beamEl * DEG2RAD, // Centre.
//            30 * DEG2RAD, 30 * DEG2RAD, // Half-widths.
//            0.2 * DEG2RAD, 0.2 * DEG2RAD); // Spacings.

    // Generate test source positions for the hemisphere.
    oskar_SphericalPositions<float> pos (
            180 * DEG2RAD, 45 * DEG2RAD, // Centre.
            180 * DEG2RAD, 45 * DEG2RAD, // Half-widths.
            //0.03 * DEG2RAD, 0.03 * DEG2RAD, // Spacings.
            0.2 * DEG2RAD, 0.2 * DEG2RAD, // Spacings.
            0.0, true, false, true, true,
            oskar_SphericalPositions<float>::PROJECTION_NONE);

    int ns = 1 + pos.generate(0, 0); // No. of sources (add a point at zenith).
    std::vector<float> slon(ns), slat(ns);
    slon[0] = 0; slat[0] = 90 * DEG2RAD; // Add a point at zenith.
    pos.generate(&slon[1], &slat[1]); // Add a point at zenith.
    std::vector<float> image(ns * 2); // Beam pattern real & imaginary values.

    // Call CUDA beam pattern generator.
//    float freq[] = {70, 115, 150, 200, 240, 300, 400, 450}; // MHz.
    float freq[] = {240, 400, 450}; // MHz.
    const int nf = sizeof(freq) / sizeof(float); // Number of frequencies.
    for (int f = 0; f < nf; ++f) {
        TIMER_START
        oskar_cudaf_bp2hc(na, &ax[0], &ay[0], ns, &slon[0],
                &slat[0], beamAz * DEG2RAD, beamEl * DEG2RAD,
                2 * M_PI * (freq[f] * 1e6 / C_0), 0, 0, 1.0f, 0.0f, &image[0]);
        TIMER_STOP("Finished beam pattern (%.0f MHz, super-station)", freq[f]);

        // Write image data to file.
        char fname[200];
        sprintf(fname, "beamPatternSuperStation_%.0f.dat", freq[f]);
        file = fopen(fname, "w");
        for (int s = 0; s < ns; ++s) {
            fprintf(file, "%12.3f%12.3f%16.4e%16.4e\n",
                    slon[s] * RAD2DEG, slat[s] * RAD2DEG, image[2*s], image[2*s+1]);
        }
        fclose(file);
    }

}

/**
 * @details
 * Tests beam pattern creation using CUDA.
 */
void CudaBeamPatternTest::test_satStation()
{
    // Generate array of antenna positions.
    int seed = 10;
    float radius = 28.5; // metres.
    float xs = 1.5, ys = 1.5, xe = 0.0, ye = 0.0; // separations, errors.

    int na = oskar_GridPositions::circular(seed, radius, xs, ys, xe, ye);
    printf("Satellite-station contains %d antennas.\n", na);
    std::vector<float> ax(na), ay(na), az(na); // Antenna positions.
    oskar_GridPositions::circular(seed, radius, xs, ys, xe, ye, &ax[0], &ay[0]);

    // Rotate around z.
    float matrix[9];
    Matrix3::rotationZ(matrix, float(0 * DEG2RAD));
    Matrix3::transformPoints(matrix, na, &ax[0], &ay[0], &az[0]);

    // Write antenna positions to file.
    FILE* file = fopen("arraySatStation.dat", "w");
    for (int a = 0; a < na; ++a) {
        fprintf(file, "%12.3f%12.3f\n", ax[a], ay[a]);
    }
    fclose(file);

    // Set beam direction.
    float beamAz = 0;  // Beam azimuth.
    float beamEl = 90; // Beam elevation.

    // Generate test source positions for a square image.
//    SphericalPositions<float> pos (
//            beamAz * DEG2RAD, beamEl * DEG2RAD, // Centre.
//            30 * DEG2RAD, 30 * DEG2RAD, // Half-widths.
//            0.2 * DEG2RAD, 0.2 * DEG2RAD); // Spacings.

    // Generate test source positions for the hemisphere.
    oskar_SphericalPositions<float> pos (
            180 * DEG2RAD, 45 * DEG2RAD, // Centre.
            180 * DEG2RAD, 45 * DEG2RAD, // Half-widths.
            //0.03 * DEG2RAD, 0.03 * DEG2RAD, // Spacings.
            0.2 * DEG2RAD, 0.2 * DEG2RAD, // Spacings.
            0.0, true, false, true, true,
            oskar_SphericalPositions<float>::PROJECTION_NONE);

    int ns = 1 + pos.generate(0, 0); // No. of sources (add a point at zenith).
    std::vector<float> slon(ns), slat(ns);
    slon[0] = 0; slat[0] = 90 * DEG2RAD; // Add a point at zenith.
    pos.generate(&slon[1], &slat[1]); // Add a point at zenith.
    std::vector<float> image(ns * 2); // Beam pattern real & imaginary values.

    // Call CUDA beam pattern generator.
//    float freq[] = {70, 115, 150, 200, 240, 300, 400, 450}; // MHz.
    float freq[] = {240, 400, 450}; // MHz.
    const int nf = sizeof(freq) / sizeof(float); // Number of frequencies.
    for (int f = 0; f < nf; ++f) {
        TIMER_START
        oskar_cudaf_bp2hc(na, &ax[0], &ay[0], ns, &slon[0],
                &slat[0], beamAz * DEG2RAD, beamEl * DEG2RAD,
                2 * M_PI * (freq[f] * 1e6 / C_0), 0, 0, 1.0f, 0.0f, &image[0]);
        TIMER_STOP("Finished beam pattern (%.0f MHz, sat-station)", freq[f]);

        // Write image data to file.
        char fname[200];
        sprintf(fname, "beamPatternSatStation_%.0f.dat", freq[f]);
        file = fopen(fname, "w");
        for (int s = 0; s < ns; ++s) {
            fprintf(file, "%12.3f%12.3f%16.4e%16.4e\n",
                    slon[s] * RAD2DEG, slat[s] * RAD2DEG, image[2*s], image[2*s+1]);
        }
        fclose(file);
    }
}

/**
 * @details
 * Tests beam pattern creation using CUDA.
    fwrite(&ns, sizeof(int), 1, file);
    fwrite((void*)slon, sizeof(float), ns, file);
    fwrite((void*)slat, sizeof(float), ns, file);
    fwrite((void*)image, sizeof(float), 2 * ns, file);
 */
void CudaBeamPatternTest::test_stations200()
{
    // Set beam direction.
    float beamAz = 0;  // Beam azimuth.
    float beamEl = 90; // Beam elevation.

    // Set up test source positions for the hemisphere.
    float slat[] = {0.41708,1.0712,1.3863,3.8721,4.4689,4.8555,5.3802,6.8269,
            6.837,7.0358,7.3013,7.5439,7.5992,7.6964,8.6809,9.5987,10.001,
            10.008,10.568,10.71,11.099,11.692,11.878,12.246,12.476,13.046,
            13.099,13.436,13.714,14.596,14.635,14.908,15.209,15.364,16.366,
            16.516,16.552,16.633,16.819,17.006,17.529,17.694,18.697,19.957,
            20.143,20.333,20.49,20.608,20.744,21.13,21.592,21.596,21.752,
            21.917,22.598,22.885,22.959,23.176,23.226,23.388,23.599,23.667,
            23.742,24.842,25.726,26.669,26.701,27.112,27.571,27.999,28.009,
            28.69,30.341,30.395,30.635,31.499,31.565,31.586,31.649,31.784,
            33.164,33.232,34.075,34.24,34.34,35.076,35.98,36.163,36.352,
            36.785,37.554,38.175,38.719,38.827,39.213,39.227,39.498,39.841,
            40.103,40.211,40.549,40.583,42.245,42.383,42.596,43.811,44.033,
            44.079,44.178,44.853,45.536,45.707,45.766,45.969,46.192,47.568,
            47.772,47.954,48.451,49.231,49.249,49.475,49.487,49.514,51.104,
            51.194,51.769,52.173,52.674,52.674,52.834,53.541,54.178,54.256,
            55.444,55.985,56.023,56.306,57.989,58.168,58.297,58.42,58.867,
            58.959,61.173,61.81,62.029,62.917,63.843,64.009,65.855,67.022,
            67.334,67.614,67.836,67.922,68.148,68.897,69.742,69.814,70.125,
            70.22,70.223,71.486,71.535,71.568,72.006,73.042,73.286,73.557,
            73.586,73.907,74.324,74.775,75.665,75.988,76.773,78.183,78.236,
            78.835,80.181,81.005,81.244,81.439,81.958,82.2,82.547,83.104,
            83.634,83.645,84.061,84.51,84.785,85.031,86.052,86.336,86.377,
            86.571,88.177,89.652};
    float slon[] = {94.494,288.37,10.519,334.39,262.92,175.9,208.27,85.422,
            165.19,346.71,196.85,187.61,83.374,176,224.66,244.49,142.39,132.28,
            355.67,13.586,318.66,328.78,286.63,35.536,94.274,120.73,244.7,
            49.159,259.64,38.434,235.35,177.9,280.46,257.41,325.34,320.73,
            120.3,251.55,71.212,10.995,267.87,180.01,172.77,325.7,219.55,
            222.36,309.4,289.98,207.62,65.852,86.376,319.14,10.323,176.36,
            60.454,352.33,256.57,180.17,169.59,21.463,245.51,15.275,25.72,
            187.79,34.823,294.53,294.32,260.08,53.952,237.46,186.69,350.27,
            233.64,288.12,163.37,155.66,297.11,30.049,47.942,62.42,140.74,
            299.3,289.21,21.77,143.73,189.68,150.05,236.47,226.07,105.11,
            155.39,5.5754,354.26,60.181,38.238,134.07,71.323,176.29,122.22,
            342.59,331.32,18.964,265.63,96.883,152.22,197.23,339.39,150.39,
            353.9,108.52,252.4,239.88,194.09,251.32,239.95,64.128,46.085,
            359.67,61.604,11.736,202.03,317.47,240.9,68.556,132.81,165.86,
            353.39,56.306,307.99,232.12,135.46,68.733,154.17,173.53,43.42,
            212.22,81.428,138.46,209.88,90.65,104.56,222.15,95.501,296.78,
            353.76,262.89,123.8,210.26,38.797,326.27,316.68,294.39,93.862,
            213.97,8.1045,153.09,112.58,58.135,64.356,152.24,33.923,215.47,
            169.53,250.54,251.96,229.87,12.097,24.77,115.06,191.11,235.6,
            146.74,295.19,258.61,348.71,191.28,117.05,38.027,219.95,280.37,
            152.44,32.696,95.93,55.316,101.16,158.43,189.77,164.67,315.13,
            186.5,339.7,229.58,344.77,86.655,243.4,104.06,241.85,250.25,
            24.477,91.724};
    int ns = sizeof(slon) / sizeof(float);
    for (int s = 0; s < ns; ++s) {
        slon[s] *= DEG2RAD;
        slat[s] *= DEG2RAD;
    }
    std::vector<float> image(ns * 2); // Beam pattern real & imaginary values.

    srand(10);
    FILE* output = fopen("output.dat", "w");
    float freq = 400; // MHz.
    for (int station = 0; station < 50; ++station) {
        // Generate array of antenna positions.
        int seed = rand();
        float radius = 28.5; // metres.
        float xs = 1.5, ys = 1.5, xe = 0.3, ye = 0.3; // separations, errors.

        int na = oskar_GridPositions::circular(seed, radius, xs, ys, xe, ye);
        printf("Satellite-station %d contains %d antennas.\n", station, na);
        std::vector<float> ax(na), ay(na), az(na); // Antenna positions.
        oskar_GridPositions::circular(seed, radius, xs, ys, xe, ye, &ax[0], &ay[0]);

        // Write antenna positions to file.
        char fname[200];
        sprintf(fname, "arraySatStation%02d.dat", station);
        FILE* file = fopen(fname, "w");
        for (int a = 0; a < na; ++a) {
            fprintf(file, "%12.3f%12.3f\n", ax[a], ay[a]);
        }
        fclose(file);

        // Call CUDA beam pattern generator.
        TIMER_START
        oskar_cudaf_bp2hc(na, &ax[0], &ay[0], ns, &slon[0],
                &slat[0], beamAz * DEG2RAD, beamEl * DEG2RAD,
                2 * M_PI * (freq * 1e6 / C_0), 0, 0, 1.0f, 0.0f, &image[0]);
        TIMER_STOP("Finished beam points (station %d)", station);

        // Write image data to file.
        for (int s = 0; s < ns; ++s) {
            fprintf(output, "%14.5f%14.5f%17.5e%17.5e\n",
                    slon[s] * RAD2DEG, slat[s] * RAD2DEG,
                    image[2*s], image[2*s+1]);
        }
    }

    // Do the same for the super-station.
    // Generate array of antenna positions.
    int seed = rand();
    float radius = 21.2; // metres.
    float xs = 0.375, ys = 0.375, xe = 0.0, ye = 0.0; // separations, errors.

    int na = oskar_GridPositions::circular(seed, radius, xs, ys, xe, ye);
    printf("Super-station contains %d antennas.\n", na);
    std::vector<float> ax(na), ay(na), az(na); // Antenna positions.
    oskar_GridPositions::circular(seed, radius, xs, ys, xe, ye, &ax[0], &ay[0]);

    // Write antenna positions to file.
    FILE* file = fopen("arraySupStation.dat", "w");
    for (int a = 0; a < na; ++a) {
        fprintf(file, "%12.3f%12.3f\n", ax[a], ay[a]);
    }
    fclose(file);

    // Call CUDA beam pattern generator.
    TIMER_START
    oskar_cudaf_bp2hc(na, &ax[0], &ay[0], ns, &slon[0],
            &slat[0], beamAz * DEG2RAD, beamEl * DEG2RAD,
            2 * M_PI * (freq * 1e6 / C_0), 0, 0, 1.0f, 0.0f, &image[0]);
    TIMER_STOP("Finished beam points (super-station)");

    // Write image data to file.
    for (int s = 0; s < ns; ++s) {
        fprintf(output, "%14.5f%14.5f%17.5e%17.5e\n",
                slon[s] * RAD2DEG, slat[s] * RAD2DEG,
                image[2*s], image[2*s+1]);
    }
    fclose(output);
}

/**
 * @details
 * Tests beam pattern creation using CUDA.
 */
void CudaBeamPatternTest::test_stations2000()
{
    // Set beam direction.
    float beamAz = 0;  // Beam azimuth.
    float beamEl = 90; // Beam elevation.

    // Set up test source positions for the hemisphere.
    float slat[] = {89.858,89.835,89.742,89.719,89.719,89.541,89.409,89.373,
            89.36,89.336,89.289,89.207,89.088,89.006,88.959,88.951,88.916,
            88.871,88.666,88.561,88.553,88.553,88.515,88.508,88.473,88.424,
            88.314,88.181,88.079,87.999,87.911,87.822,87.712,87.694,87.644,
            87.601,87.534,87.516,87.443,87.425,87.363,87.347,87.341,87.326,
            87.322,87.279,87.254,87.249,87.218,87.217,87.09,87.033,87.025,
            86.994,86.992,86.873,86.85,86.837,86.682,86.666,86.63,86.508,
            86.413,86.399,86.368,86.363,86.32,86.284,86.263,85.983,85.983,
            85.921,85.868,85.852,85.845,85.819,85.794,85.786,85.688,85.663,
            85.66,85.645,85.638,85.627,85.583,85.549,85.536,85.533,85.445,
            85.421,85.313,85.276,85.269,85.267,85.223,85.206,85.135,85.084,
            85.075,85.055,84.993,84.983,84.936,84.925,84.923,84.897,84.881,
            84.864,84.841,84.827,84.518,84.49,84.435,84.371,84.338,84.318,
            84.173,83.975,83.962,83.898,83.898,83.859,83.77,83.754,83.722,
            83.697,83.696,83.649,83.599,83.519,83.474,83.417,83.396,83.313,
            83.271,83.26,83.248,83.156,83.088,83.044,82.92,82.897,82.853,
            82.804,82.762,82.759,82.739,82.735,82.706,82.703,82.703,82.568,
            82.542,82.459,82.44,82.433,82.36,82.327,82.273,82.217,82.184,
            82.098,82.079,81.896,81.867,81.846,81.814,81.783,81.702,81.633,
            81.595,81.498,81.493,81.492,81.487,81.443,81.433,81.426,81.402,
            81.385,81.347,81.341,81.338,81.214,81.186,81.178,81.162,81.158,
            81.101,81.088,81.087,81.076,81.052,80.998,80.982,80.958,80.957,
            80.917,80.858,80.847,80.799,80.715,80.668,80.627,80.565,80.541,
            80.511,80.51,80.506,80.501,80.411,80.162,80.103,80.089,79.971,
            79.902,79.827,79.809,79.803,79.794,79.777,79.775,79.769,79.751,
            79.706,79.654,79.601,79.532,79.509,79.436,79.416,79.351,79.276,
            79.272,79.252,79.218,79.199,79.178,79.135,79.041,79.026,78.853,
            78.825,78.815,78.751,78.587,78.532,78.528,78.518,78.411,78.387,
            78.264,78.247,78.207,78.166,78.045,77.913,77.805,77.757,77.711,
            77.682,77.616,77.604,77.578,77.496,77.451,77.337,77.21,77.179,
            77.163,77.131,77.05,77.025,76.925,76.835,76.697,76.564,76.558,
            76.52,76.486,76.485,76.364,76.312,76.297,76.195,76.154,76.129,
            75.958,75.955,75.913,75.894,75.886,75.836,75.811,75.798,75.77,
            75.766,75.76,75.756,75.712,75.657,75.615,75.589,75.585,75.581,
            75.569,75.541,75.523,75.44,75.3,75.241,75.164,75.146,75.129,
            75.052,75.012,74.902,74.888,74.885,74.75,74.705,74.681,74.62,74.6,
            74.585,74.556,74.435,74.431,74.419,74.349,74.306,74.287,74.279,
            74.229,74.217,74.157,74.016,73.978,73.961,73.943,73.659,73.652,
            73.608,73.591,73.581,73.563,73.546,73.504,73.503,73.4,73.372,
            73.312,73.298,73.225,73.219,73.153,73.101,72.998,72.975,72.881,
            72.774,72.764,72.719,72.664,72.631,72.597,72.549,72.535,72.524,
            72.496,72.427,72.411,72.367,72.33,72.305,72.286,72.24,72.119,72.1,
            72.086,71.97,71.961,71.903,71.835,71.825,71.81,71.797,71.726,
            71.655,71.65,71.536,71.467,71.461,71.432,71.43,71.42,71.396,71.372,
            71.332,71.317,71.297,71.294,71.282,71.227,71.219,71.188,71.116,
            71.086,71.086,71.033,70.93,70.88,70.879,70.83,70.817,70.775,
            70.684,70.67,70.648,70.634,70.624,70.613,70.563,70.523,70.514,
            70.508,70.507,70.446,70.426,70.404,70.329,70.325,70.265,70.217,
            70.195,70.184,70.153,70.024,69.98,69.927,69.806,69.773,69.626,
            69.58,69.512,69.495,69.417,69.319,69.314,69.26,69.256,69.19,69.154,
            69.087,69.066,69.06,69.027,69.006,68.998,68.964,68.943,68.942,
            68.913,68.909,68.892,68.876,68.818,68.766,68.746,68.667,68.657,
            68.639,68.56,68.466,68.327,68.266,68.242,68.158,68.155,68.105,68.1,
            68.092,68.047,67.845,67.817,67.789,67.71,67.702,67.69,67.621,
            67.604,67.579,67.51,67.436,67.411,67.406,67.304,67.22,67.178,
            67.172,67.144,67.141,67.071,67.065,67,66.994,66.889,66.642,66.638,
            66.475,66.365,66.241,66.229,66.088,66.076,66.068,66.022,66.021,
            65.963,65.957,65.923,65.9,65.893,65.876,65.868,65.815,65.758,
            65.632,65.612,65.589,65.589,65.542,65.493,65.378,65.328,65.244,
            65.197,65.182,65.126,65.013,64.904,64.77,64.738,64.734,64.645,
            64.626,64.611,64.609,64.501,64.468,64.452,64.443,64.431,64.287,
            64.252,64.065,64.026,63.941,63.938,63.934,63.891,63.882,63.85,
            63.757,63.655,63.633,63.606,63.557,63.547,63.49,63.484,63.434,
            63.371,63.329,63.208,63.166,63.16,63.14,63.135,63.126,63.09,63.079,
            62.969,62.909,62.696,62.51,62.486,62.451,62.362,62.339,62.196,
            62.109,62.049,62.021,61.991,61.98,61.735,61.631,61.629,61.622,
            61.607,61.578,61.427,61.39,61.274,61.226,61.217,61.204,61.161,
            61.157,61.147,61.078,61.068,61.064,61.062,61.06,60.936,60.861,
            60.851,60.71,60.66,60.545,60.539,60.51,60.443,60.4,60.392,60.341,
            60.243,60.218,60.214,60.164,60.047,59.981,59.967,59.924,59.873,
            59.871,59.86,59.844,59.818,59.815,59.8,59.762,59.701,59.605,59.567,
            59.556,59.509,59.497,59.486,59.466,59.406,59.366,59.359,59.355,
            59.33,59.326,59.261,59.216,59.169,59.084,58.947,58.916,58.81,
            58.778,58.762,58.732,58.721,58.66,58.626,58.612,58.596,58.589,
            58.567,58.531,58.504,58.48,58.448,58.437,58.377,58.373,58.346,
            58.321,58.211,58.185,58.185,58.16,58.091,57.82,57.811,57.78,57.747,
            57.699,57.683,57.635,57.631,57.619,57.607,57.49,57.474,57.469,
            57.469,57.458,57.434,57.432,57.416,57.377,57.332,57.241,57.233,
            57.191,57.102,57.078,57.062,57.045,57.042,57,56.995,56.969,56.966,
            56.873,56.846,56.79,56.767,56.75,56.72,56.717,56.683,56.652,56.544,
            56.493,56.482,56.476,56.471,56.467,56.383,56.382,56.326,56.322,
            56.272,56.265,56.252,56.211,56.208,56.161,56.153,56.043,56.02,
            56.007,55.968,55.913,55.872,55.761,55.693,55.647,55.558,55.546,
            55.544,55.511,55.467,55.415,55.353,55.249,55.02,54.983,54.932,
            54.815,54.814,54.8,54.726,54.67,54.572,54.556,54.482,54.479,54.376,
            54.328,54.297,54.258,54.25,54.243,54.216,54.186,54.142,54.141,
            54.113,54.043,53.984,53.923,53.92,53.917,53.873,53.871,53.805,
            53.757,53.731,53.681,53.614,53.562,53.538,53.531,53.477,53.476,
            53.404,53.356,53.287,53.275,53.265,53.196,53.17,53.084,53.019,
            52.874,52.782,52.668,52.659,52.589,52.493,52.464,52.28,52.201,
            52.197,52.187,52.072,51.995,51.982,51.907,51.881,51.817,51.815,
            51.812,51.763,51.744,51.708,51.517,51.507,51.505,51.488,51.392,
            51.317,51.277,51.107,51.1,51.096,51.086,51.084,51.062,51.048,
            51.018,50.963,50.917,50.911,50.871,50.824,50.803,50.665,50.639,
            50.637,50.627,50.52,50.313,50.299,50.247,50.208,50.207,50.175,
            50.134,50.123,50.121,50.073,49.985,49.966,49.948,49.929,49.922,
            49.898,49.883,49.764,49.749,49.672,49.577,49.542,49.522,49.489,
            49.38,49.359,49.293,49.288,49.239,49.235,49.202,49.14,49.108,
            49.089,49.076,49.074,49.07,49.035,49.028,48.949,48.832,48.788,
            48.745,48.717,48.714,48.688,48.685,48.674,48.634,48.623,48.619,
            48.6,48.58,48.54,48.511,48.403,48.359,48.278,48.227,48.201,48.169,
            48.157,48.098,48.074,48.073,48.061,48.002,47.993,47.951,47.928,
            47.916,47.892,47.852,47.848,47.83,47.806,47.741,47.64,47.517,
            47.511,47.384,47.301,47.271,47.229,47.131,47.12,47.104,47.012,
            47.011,47.01,47,46.986,46.846,46.843,46.775,46.707,46.539,46.529,
            46.47,46.411,46.411,46.35,46.346,46.281,46.256,46.217,46.042,
            46.038,46.025,46.02,45.993,45.957,45.907,45.89,45.851,45.82,45.779,
            45.617,45.611,45.476,45.424,45.372,45.336,45.311,45.213,45.168,
            45.114,45.038,45.036,44.975,44.96,44.953,44.883,44.881,44.876,
            44.86,44.844,44.835,44.808,44.751,44.657,44.602,44.599,44.589,
            44.397,44.377,44.326,44.285,44.2,44.16,44.152,44.139,44.023,44.014,
            43.997,43.89,43.847,43.807,43.768,43.731,43.671,43.535,43.441,
            43.281,43.272,43.176,43.165,43.097,43.061,42.974,42.97,42.963,
            42.942,42.911,42.855,42.809,42.802,42.8,42.719,42.704,42.655,
            42.644,42.51,42.347,42.333,42.278,42.206,42.193,42.111,42.096,
            42.053,41.978,41.968,41.932,41.856,41.838,41.832,41.768,41.734,
            41.65,41.635,41.615,41.55,41.48,41.449,41.429,41.392,41.319,41.312,
            41.263,41.226,41.211,41.119,41.064,40.877,40.793,40.793,40.791,
            40.772,40.769,40.701,40.555,40.548,40.547,40.448,40.392,40.351,
            40.31,40.28,40.273,40.263,40.21,40.143,40.14,40.016,39.99,39.948,
            39.916,39.878,39.85,39.847,39.829,39.825,39.648,39.528,39.512,
            39.494,39.378,39.369,39.355,39.29,39.274,39.21,39.178,39.165,
            39.149,39.121,39.118,39.064,39.058,38.961,38.949,38.926,38.843,
            38.807,38.741,38.677,38.578,38.56,38.462,38.436,38.434,38.425,
            38.415,38.385,38.207,38.186,38.136,38.031,38.028,37.984,37.893,
            37.85,37.839,37.776,37.744,37.731,37.7,37.698,37.559,37.478,37.46,
            37.335,37.291,37.28,37.226,37.207,37.105,37.052,37.007,36.993,
            36.976,36.958,36.937,36.89,36.784,36.772,36.728,36.583,36.579,
            36.541,36.525,36.515,36.513,36.493,36.398,36.343,36.228,36.136,
            36.109,36.072,35.972,35.966,35.915,35.887,35.867,35.861,35.86,
            35.844,35.691,35.689,35.647,35.613,35.562,35.519,35.468,35.403,
            35.379,35.379,35.201,35.172,35.103,35.084,34.991,34.928,34.836,
            34.811,34.716,34.682,34.669,34.663,34.645,34.631,34.628,34.621,
            34.586,34.55,34.492,34.472,34.426,34.405,34.334,34.316,34.293,
            34.289,34.263,34.233,34.228,34.148,34.091,33.979,33.974,33.967,
            33.93,33.89,33.877,33.856,33.818,33.803,33.788,33.758,33.676,
            33.645,33.627,33.616,33.571,33.51,33.407,33.343,33.16,33.104,
            33.088,33.04,33.037,33.012,32.951,32.885,32.871,32.803,32.785,
            32.755,32.664,32.599,32.554,32.392,32.377,32.369,32.36,32.336,
            32.335,32.307,32.248,32.165,32.063,31.997,31.966,31.923,31.919,
            31.903,31.572,31.531,31.483,31.414,31.376,31.353,31.341,31.228,
            31.2,31.182,31.153,31.15,31.14,31.131,31.05,31.048,30.889,30.852,
            30.845,30.759,30.751,30.709,30.613,30.574,30.55,30.512,30.441,
            30.427,30.343,30.237,30.193,30.141,30.022,30.014,29.973,29.816,
            29.815,29.779,29.647,29.577,29.568,29.528,29.465,29.401,29.38,
            29.375,29.34,29.288,29.276,29.276,29.263,29.189,29.178,29.175,
            29.169,29.141,29.134,29.039,28.907,28.885,28.876,28.846,28.829,
            28.825,28.744,28.712,28.675,28.635,28.539,28.483,28.474,28.469,
            28.423,28.393,28.349,28.323,28.245,28.183,28.172,28.123,28.064,
            28.017,27.954,27.942,27.861,27.731,27.713,27.634,27.576,27.524,
            27.499,27.446,27.439,27.407,27.328,27.313,27.248,27.201,27.103,
            27.086,27.059,27.006,27.004,27.002,26.997,26.995,26.981,26.967,
            26.832,26.832,26.759,26.691,26.679,26.676,26.666,26.655,26.617,
            26.588,26.586,26.551,26.53,26.456,26.434,26.42,26.397,26.285,
            26.282,26.278,26.265,26.23,26.199,26.153,26.122,26.08,26.067,
            26.059,26.024,26.017,25.982,25.941,25.883,25.814,25.787,25.769,
            25.695,25.606,25.586,25.546,25.469,25.466,25.46,25.386,25.376,
            25.353,25.318,25.266,25.262,25.236,25.224,25.183,25.13,25.101,
            25.038,24.897,24.843,24.791,24.714,24.654,24.645,24.591,24.541,
            24.479,24.317,24.299,24.252,24.155,24.137,24.135,24.134,24.063,
            24.059,24.051,23.96,23.811,23.732,23.731,23.73,23.683,23.621,
            23.619,23.588,23.49,23.476,23.449,23.401,23.399,23.386,23.366,
            23.366,23.348,23.309,23.308,23.235,23.229,23.193,23.111,23.102,
            23.075,23.042,22.96,22.952,22.834,22.826,22.802,22.729,22.714,
            22.646,22.599,22.577,22.53,22.514,22.507,22.47,22.466,22.405,
            22.351,22.31,22.292,22.279,22.21,22.203,22.182,22.111,22.099,
            22.062,22.039,22.038,21.968,21.932,21.715,21.658,21.62,21.565,
            21.526,21.511,21.384,21.284,21.258,21.246,21.231,21.161,21.155,
            21.131,21.127,21.063,21.021,21,20.842,20.815,20.769,20.763,20.7,
            20.663,20.612,20.581,20.489,20.417,20.327,20.316,20.299,20.282,20,
            19.84,19.752,19.725,19.721,19.716,19.668,19.644,19.64,19.624,19.46,
            19.445,19.43,19.419,19.358,19.281,19.275,19.232,19.129,19.065,
            18.903,18.802,18.792,18.767,18.742,18.706,18.613,18.471,18.451,
            18.446,18.38,18.343,18.233,18.143,18.085,18.021,18.007,18.002,
            17.92,17.879,17.822,17.555,17.54,17.5,17.437,17.389,17.37,17.332,
            17.283,17.183,17.179,17.139,17.088,17.047,17.024,16.944,16.944,
            16.859,16.854,16.845,16.795,16.761,16.73,16.66,16.599,16.54,16.5,
            16.488,16.444,16.421,16.397,16.342,16.315,16.249,16.247,16.242,
            16.199,16.119,15.854,15.663,15.662,15.656,15.639,15.551,15.548,
            15.428,15.325,15.325,15.255,15.239,15.229,15.199,15.128,15.022,
            15.011,14.996,14.963,14.941,14.919,14.914,14.892,14.838,14.786,
            14.665,14.652,14.526,14.433,14.339,14.317,14.292,14.236,14.208,
            14.193,14.156,14.14,14.103,14.096,14.005,13.992,13.968,13.865,
            13.83,13.828,13.766,13.763,13.755,13.735,13.714,13.713,13.701,
            13.667,13.624,13.508,13.483,13.465,13.452,13.446,13.415,13.317,
            13.311,13.268,13.135,13.09,12.974,12.972,12.869,12.864,12.822,
            12.805,12.799,12.719,12.712,12.695,12.509,12.435,12.407,12.344,
            12.326,12.258,12.194,12.187,12.127,12.124,12.123,12.113,12.065,
            12.065,12.036,12.034,12.024,12.013,12.011,11.986,11.959,11.957,
            11.885,11.883,11.881,11.868,11.813,11.779,11.777,11.759,11.665,
            11.611,11.548,11.535,11.472,11.465,11.441,11.291,11.279,11.241,
            11.239,11.173,11.149,11.091,11.072,10.912,10.821,10.792,10.788,
            10.77,10.634,10.579,10.508,10.47,10.369,10.331,10.32,10.265,10.263,
            10.238,10.194,10.143,10.121,10.068,10.051,10.046,10.022,9.9116,
            9.908,9.8856,9.83,9.757,9.6983,9.6186,9.6115,9.5779,9.4788,9.4068,
            9.3828,9.3788,9.3574,9.3305,9.2627,9.2448,9.1093,9.1016,8.9378,
            8.918,8.8526,8.819,8.7465,8.6935,8.6799,8.679,8.6241,8.5607,8.5404,
            8.4237,8.3976,8.3858,8.3814,8.3442,8.3157,8.3007,8.2741,8.1784,
            8.1531,8.1346,8.1044,8.0493,8.0176,7.9967,7.9811,7.8602,7.8539,
            7.7834,7.7282,7.6457,7.634,7.6107,7.5248,7.455,7.3521,7.3188,
            7.1372,7.0866,7.0693,6.9854,6.9651,6.9227,6.9039,6.8796,6.877,
            6.8615,6.8614,6.8584,6.8505,6.7274,6.7237,6.7212,6.7176,6.6678,
            6.6331,6.6052,6.5824,6.3859,6.368,6.3619,6.3266,6.2109,6.208,
            6.2029,6.1683,6.1656,6.1639,6.1478,6.0729,6.0672,6.061,6.0552,
            5.9929,5.9869,5.8893,5.8569,5.8567,5.771,5.7184,5.5932,5.5838,
            5.5268,5.524,5.4946,5.4639,5.4635,5.4326,5.3238,5.3135,5.2311,
            5.1965,5.1133,5.0661,5.0646,5.0177,5.012,4.9552,4.9438,4.9086,
            4.8943,4.713,4.6988,4.6748,4.6644,4.6429,4.622,4.6054,4.541,4.3906,
            4.3609,4.3425,4.3363,4.3226,4.1881,4.1297,4.1092,4.0856,4.0637,
            3.8888,3.7835,3.6442,3.625,3.6074,3.5556,3.5112,3.3536,3.3481,
            3.327,3.152,3.1043,3.0796,3.0656,3.0651,3.0155,2.9816,2.9354,
            2.9096,2.852,2.8519,2.808,2.7499,2.6564,2.6333,2.624,2.6179,2.6077,
            2.6012,2.5452,2.532,2.4977,2.4659,2.4174,2.4155,2.3604,2.3106,
            2.2213,2.1522,2.0365,1.9685,1.965,1.9258,1.917,1.7888,1.7461,
            1.6742,1.6653,1.4734,1.3994,1.3011,1.2947,1.2805,1.2686,1.1704,
            1.1561,1.148,1.1414,1.1169,1.0285,1.0207,0.91463,0.89799,0.83073,
            0.81764,0.80864,0.79695,0.74661,0.71463,0.70136,0.68962,0.6872,
            0.66201,0.62215,0.62123,0.59497,0.4526,0.42475,0.34862,0.34732,
            0.32448,0.31999,0.30011,0.25114,0.21139,0.13265,0.1183,0.090799,
            0.029349,0.020796};
    float slon[] = {83.612,266.34,320.04,309.53,214.94,235.71,329.41,155.95,
            104.31,227.48,106.35,223.93,17.112,358.06,74.435,218.65,125.15,
            258.39,10.078,24.063,333.74,31.598,119.66,189.43,88.791,195.44,
            281.11,187.88,335.5,52.96,150.04,100.91,215.32,13.131,22.927,
            116.24,35.416,61.216,133.62,14.314,255.33,230.88,62.662,22.375,
            146.4,166.7,72.963,313.04,215.26,8.2849,323.79,163.06,20.889,
            38.257,359.43,311.88,221.47,9.7,116.11,166.96,35.646,205.56,117.32,
            162.18,208.02,26.944,20.643,108.34,187.82,202.28,86.96,328.58,
            297.26,160.04,353.54,208.18,84.392,291.81,162.46,89.989,343.96,
            51.354,184.52,349.89,233.4,221.28,169.07,208,328.07,135.44,82.355,
            152.47,98.495,160.04,225.91,192.47,138.76,314.44,108.13,144.01,
            186.38,22.257,83.292,42.655,35.561,320.5,12.02,302.05,182.62,
            40.938,176.56,215.8,32.478,352.16,235.09,166.01,310.95,94.618,
            296.63,118.43,338.87,87.879,344.56,183.9,203.25,357.74,277.55,
            112.97,20.834,15.867,292.66,148.35,138.3,188.33,321.17,146.13,
            217.58,34.129,120.95,52.143,88.157,136.43,97.315,77.616,228.14,
            287.9,75.065,322.65,268.46,193.1,349.19,203.36,78.368,308.79,
            310.32,112.79,117.71,302.4,177.31,18.685,280.09,153.6,100.79,
            120.06,132.1,286.13,13.929,261.6,314.17,102.89,236.47,83.479,
            223.9,27.045,348.03,219.59,138.14,11.005,308.72,217.28,305.22,
            181.66,2.8479,330.87,147.85,263.65,54.398,293.48,327.46,280.06,
            272.56,145.87,252.68,203.57,210.51,124.17,253.52,57.911,0.54502,
            202.32,196.73,198.3,250.03,333.9,339.92,325.17,217.48,333.44,
            42.101,122.69,13.223,193.81,265.4,65.24,153.45,35.34,109.16,280.84,
            193.31,276.87,230.02,321.53,21.849,63.278,149.88,266.33,321.46,
            9.3072,49.523,152.67,275.24,188.8,271.61,61.127,242.18,222.71,
            2.4646,266.48,357.02,46.145,129.81,68.786,257.18,64.032,355.27,
            6.1197,14.327,289.56,309.53,203.85,271.48,187.03,210.93,68.664,
            181.24,18.329,20.194,120.67,227.13,321.11,242.42,246.7,250.47,
            287.94,237.82,187.18,119.43,336.3,88.732,184.03,266.51,91.501,
            304.41,193.74,327.65,126.25,336.72,333.98,211.57,36.634,132.08,
            99.304,95.795,81.554,0.47548,321.48,163.26,208.23,113.62,357.85,
            354.2,347.24,239.86,261.42,120.26,188.2,98.408,258.62,280.09,
            29.183,79.769,73.425,224.68,261.07,300.37,6.8023,72.762,168.87,
            136.22,122.54,22.986,274.08,144.96,242.74,198.39,18.525,110.7,
            347.56,335.33,136.09,222.36,202.51,299,344.77,27.182,319.69,202.48,
            69.968,79.723,254.07,214.83,211.07,348.66,209.43,35.928,59.977,
            36.754,52.649,241.76,230.35,134.08,58.634,140.23,287.99,143.93,
            271.84,106.28,230.4,318.64,75.472,172.93,40.676,47.653,23.041,
            28.547,225.7,148.08,229.89,308.36,274.89,351.42,281.35,336.81,
            266.09,91.303,258.93,249.66,278.39,269,114.62,183.76,278.3,206.21,
            343.39,61.766,326.6,270.8,103.02,225.87,166.62,46.598,197.78,
            349.02,159.17,212.75,39.949,71.947,58.667,13.276,98.181,82.848,
            129.08,48.363,359.49,184.87,139.62,89.947,131.31,143.66,333.47,
            178.37,219.31,1.731,211.58,279.89,236.59,190.19,297.28,346.48,
            112.95,286.95,102.66,5.3622,33.894,118.34,110,6.488,58.395,159.84,
            276.04,245.25,257.23,165.52,330.94,356.02,335.74,166.15,325.77,
            139.12,217.09,201.71,304.5,102.53,238.79,216.81,236.33,111.58,
            119.39,67.751,36.246,103.16,127.74,192.87,356.7,10.144,255.43,
            325.86,311.7,42.901,343.9,158.72,315.27,311.38,127.85,227.21,
            311.24,7.557,27.655,135.62,53.71,12.275,281.61,117.81,294.29,
            62.503,243.4,315.22,272.58,82.665,129.22,130.74,96.28,121.43,
            31.306,162.56,163.68,10.453,229.36,21.405,60.911,246.48,199.64,
            2.1729,103.71,135.58,52.737,26.832,165.87,133.34,296.84,193.51,
            294.31,165.74,5.0522,1.794,59.842,131.74,258.56,57.393,100.36,
            232.18,103.39,115.9,55.95,139.56,322.46,319.6,141.7,243.16,90.797,
            342,224.89,74.501,39.476,203.71,98.76,25.619,57.042,17.827,245.12,
            281.43,290.65,95.419,322.52,218.87,5.1843,123.85,192.12,225.99,
            160.83,292,52.138,350.94,300.15,122.44,221.85,109.35,32.119,187.75,
            297.1,275.01,341.15,120.08,140.31,54.149,120.13,199.32,198.11,
            57.752,42.152,143.48,299.3,66.6,180.28,45.473,311.27,275.99,203.17,
            140.24,176.45,319.29,325.82,179.42,190.52,327.49,208.3,279.28,
            238.1,169.08,79.116,216.93,66.333,71.103,310.32,45.234,232.41,
            157.43,220.54,265.49,109.18,15.468,300.78,132.95,238.08,322.46,
            98.676,359.24,300.37,284.88,236.38,195.72,139.21,296,214.32,281.39,
            355.56,283.77,307.05,174.82,314.55,120.18,73.914,177.97,11.235,
            297.93,95.133,243.9,285.79,245.46,234.27,85.443,171.87,337.11,
            86.797,75.281,98.09,279.29,119.31,217.11,66.245,31.485,111.21,
            83.116,327.31,337.28,11.476,213.71,15.774,152.97,187.77,302.52,
            225.01,91.874,325.69,276.23,202.56,322.98,132.51,121.58,222.79,
            31.282,135.18,67.457,291.79,260.37,242.88,329.03,295.55,197.54,
            5.595,34.087,185.31,342.89,303.5,336.6,350.43,134.11,115.52,281.97,
            76.4,345.29,334.88,131.66,124.17,249.37,257.98,288.12,213.72,
            34.983,201.42,15.512,272.75,237.47,215.81,81.718,256.94,260.82,
            123.92,11.79,303.7,277.31,183.47,254.51,284.82,119.04,328.92,
            207.61,103.65,96.071,320.46,131.8,54.006,340.68,234.3,353.6,69.78,
            298.35,177.77,212.68,16.161,203.2,228.08,179.32,21.465,185.46,
            19.15,303.71,214.08,248.77,233,224.44,343.39,63.7,170.97,303.27,
            178.91,274.47,64.756,248.98,329.19,58.557,154.11,15.067,81.269,
            239.81,313.68,124.1,9.8106,325.9,169.58,327.77,118.07,248.8,6.2813,
            184.44,119.45,121,343.2,270.18,120.21,227.82,149.6,207.54,345.42,
            221.71,54.208,301.78,261.42,39.185,58.087,106.92,152.49,190.23,
            99.035,298.06,285.4,98.549,221.65,36.558,241.19,125.06,241.02,
            106.31,244.95,141.76,141.05,74.507,260.83,294.95,333.53,185.08,
            69.532,217.04,71.345,147.74,307.11,154.47,333.24,134.31,251.37,
            211.91,36.312,148.46,332.89,19.998,138.26,86.63,82.011,128.56,
            332.68,180.9,289.17,126.1,165.13,342.39,47.874,25.311,254.19,
            335.41,39.204,234.61,52.582,249.83,225.22,15.74,287.25,355.04,
            157.23,124.11,17.57,81.073,209.16,216.5,90.907,235.56,21.634,
            338.58,33.311,120.23,234.38,181.41,191.13,136.48,276.81,101.7,
            233.74,331.99,119.04,292.84,283.55,44.756,56.66,149.4,247.44,
            236.77,244.79,3.3792,46.299,275.01,303.09,268.9,340.03,331.1,
            80.307,183.52,283.59,188.08,222.26,200.97,263.16,22.825,177.4,
            82.773,121.46,198.59,267.73,148.43,182.74,46.43,77.341,105.42,
            161.99,86.502,94.775,320.97,211.01,337.92,222.51,90.259,36.913,
            196.69,159.35,248.94,273.4,143.79,204.27,74.01,339.67,184.61,
            99.449,82.49,343.05,248.19,254.83,236.49,280.43,208.97,181.16,
            316.34,141.46,87.349,101.39,325.72,252.96,307.1,136.33,227.89,
            11.36,331.21,169.11,187.17,275.87,121.04,225.35,117.68,112,232.59,
            156.13,37.039,85.014,349.84,251.6,237.4,117.4,7.1359,205.37,13.081,
            95.307,68.637,161.75,276.72,226.06,113.29,105.14,28.166,61.9,
            259.66,32.201,330.41,154.68,28.7,205.97,299.44,125.05,280.76,255,
            212.74,135.72,141.78,154.19,152.29,78.813,178.84,14.353,203.33,
            17.691,314.02,309.61,121.77,350.65,343.72,355.9,56.778,1.0506,
            89.345,124.66,84.002,272.12,81.334,161.44,93.4,124.49,325.06,
            4.5723,47.6,139.7,302.62,76.776,336.68,349.13,135.09,354.55,43.951,
            273.94,208.57,223.62,176.37,79.362,51.888,228.66,288.87,241.07,
            169.78,340.01,212.93,81.629,246.18,115.43,269.61,359.33,97.104,
            335.47,250.7,34.293,88.514,336.48,172.72,317.71,280.55,6.5822,
            277.47,246.89,312.36,208.98,225.4,40.013,76.93,13.093,160.04,
            117.57,103.43,178.72,65.414,336.17,338.47,212.93,0.2911,325.08,
            245.84,26.586,358.7,113.2,291.32,166.12,211.37,171.93,198.88,
            63.114,211.41,55.729,160.36,193.54,166.28,300.28,358.62,350.01,
            268.53,71.985,13.079,67.897,207.92,226.18,131.32,229.16,320.87,
            91.267,103.09,45.151,190.29,295.48,107.92,283.56,157.32,198.19,355,
            248.32,349.25,34.548,323.31,21.04,44.395,227.06,133.24,115.05,
            286.45,108.61,218.69,166.31,105.33,299.67,205.39,25.383,95.872,
            61.515,201.71,72.753,177.25,262.57,343.8,274.45,28.825,337.77,
            350.81,218.56,344.7,119.03,324.44,0.13162,173.98,53.091,113.4,
            61.695,213.45,236.74,125.63,19.33,16.98,20.109,25.744,5.6432,
            350.52,264.53,270.86,11.993,42.338,94.069,321.61,349.94,357.87,
            124.84,105.23,67.409,267.53,258.49,68.002,156.22,16.414,235.97,
            281.18,310.64,282.73,156.06,125.22,19.94,295,38.175,2.1867,99.015,
            339.4,242.73,138.84,308.5,242.94,218.91,158.19,346.06,296.25,
            3.7798,50.982,173.81,209.02,105.48,157.99,143.38,49.43,342.99,
            129.62,301.31,14.881,152.58,27.23,112.97,340.55,307.62,62.471,
            192.92,106.16,325.03,29.299,283.49,62.787,259.2,83.522,74.569,
            77.808,351.6,137.47,228.7,16.763,83.545,314.94,165.65,1.1029,
            167.38,296.67,313.88,108.39,84.962,299.37,157.59,182.55,66.771,
            54.539,326.45,357.39,140.43,297.65,343.46,321.78,302.76,245.98,
            61.847,85.518,156.34,9.0224,96.713,352.86,112.57,205.83,220.2,
            324.55,142.57,249.4,73.615,22.627,224.06,247.69,106.84,205.76,
            113.84,291.42,131.58,251.56,228.03,347.25,72.287,215.34,30.133,
            195.99,304.61,14.651,118.57,255.37,309.71,180.32,358.11,154.31,
            96.244,170.26,57.904,57.203,96.603,272.56,219.3,348.1,278.4,206.23,
            162.08,103.34,270.86,33.969,38.443,264.56,127.65,209.03,107.59,
            256.93,129.78,258.65,358.32,30.132,168.55,33.769,261.06,328.34,
            31.109,187.18,198.95,246.65,107.88,216.68,71.461,236.43,251.41,
            165.48,56.757,151.84,214.58,116.04,299.06,44.167,90.425,337.54,
            235.87,271.05,291.91,17.434,149.3,261.18,50.056,227.72,88.86,
            302.39,301.2,163.11,142.11,346.17,2.9442,143.44,175.6,222.53,
            25.204,51.368,235.52,78.595,42.887,15.529,59.601,184,312.22,275.85,
            48.582,23.371,242.08,173.59,178.35,112.85,116.46,327.28,162.12,
            269.51,66.691,30.572,74.531,201.21,238.21,338.12,14.488,58.917,
            157.72,117.24,32.376,291.72,143.84,235.91,204.06,1.1239,234.49,
            114.16,95.736,165.76,224.34,288.67,202.02,8.9295,285.67,98.312,
            296.25,247.88,217.4,139.3,23.593,359.49,237.98,82.502,33.212,
            86.752,324.93,78.245,172.63,327.32,69.762,161.28,222.41,213.92,
            239.72,96.365,152.59,287.76,335.63,169.1,110.27,158.17,110.47,
            99.005,49.949,59.957,177.82,31.17,333.66,53.451,57.773,258.38,
            242.96,129.07,32.565,2.9693,134.2,283.79,161.02,35.865,290.1,
            237.4,162.85,192.01,189.6,226.69,232.76,69.059,288.62,70.766,
            148.07,84.85,97.994,3.1207,334.18,187.28,167.09,188.47,121.25,
            119.66,355.78,170.54,268.87,241.19,286.41,98.116,102.21,258.21,
            66.469,300.13,61.079,343.18,260.12,48.329,307.11,335.41,203.11,
            143.58,158.98,252.61,93.615,10.271,341.27,358.62,280.61,356.18,
            175.52,46.074,167.17,267.33,242.42,314.63,272.97,222.18,98.934,
            121.1,300.86,138.92,28.925,311.61,156.73,61.949,1.5467,234.9,
            133.09,135.4,158.88,185.8,108.04,172.2,2.2489,61.717,109.28,268.01,
            209.12,252.43,289.68,306.71,42.38,236.61,271.06,252.77,217.84,
            13.776,70.254,119.05,231.42,78.265,27.688,353.01,74.433,353.97,
            219.73,89.272,186.46,256.62,93.553,41.287,197.88,78.805,112.38,
            350.33,111.31,340.65,147.8,3.7201,111.62,55.874,357.87,162.09,
            196.28,94.439,317.71,37.102,296.48,153.78,331.32,190.08,313.5,
            127.01,144.05,215.25,328.15,47.875,15.18,144.37,214.45,331.08,
            105.76,196.21,281.41,117.86,34.295,159.01,10.468,243.14,40.173,
            71.871,190.86,225.85,134.49,218.32,304.7,252.7,141.43,205.87,
            89.919,261.84,123.6,28.308,108.8,108.14,8.3596,63.401,309.93,
            236.14,308.35,97.539,322.54,75.165,347.1,149.17,82.643,294.61,
            129.76,180.55,269.16,299.47,142.01,34.789,95.541,285.1,337.27,
            204.57,337.69,215.01,355.66,274.45,66.822,186.04,230.45,312.82,
            216.04,359.88,46.503,105.61,171.68,46.65,82.124,65.186,241.93,
            117.28,284.61,196.57,83,247.23,17.67,206.14,357.75,130.67,201.14,
            333.82,93.556,299.69,63.045,316.74,100.67,305.81,290.42,68.085,
            352.28,91.342,280.28,291.88,179.26,329.66,36.354,48.897,308.99,
            6.7127,262.2,294,41.839,175.88,125.08,278.6,102.7,296.78,62.302,
            310.91,333.38,68.797,18.127,197.44,3.4264,298.21,327.08,253.91,
            87.599,212.12,338,322.38,218.24,285.26,301.02,201.65,0.25024,
            90.459,155.5,155.04,315.08,24.351,122.37,63.742,88.573,262.02,
            103.75,85.443,50.277,79.463,294.32,136.16,239.59,336.89,153.53,
            217.86,349.05,131.27,239.2,113.31,318.86,106.4,106.33,326.55,
            177.44,74.57,9.2949,61.275,108.84,346.12,282.12,242.37,302.66,
            151.51,253.35,173.26,295.41,157.46,309.59,3.203,358.57,99.072,
            12.066,54.756,172.65,319.98,102.03,282.29,61.341,263.27,88.784,
            29.463,307.05,247.16,344.92,354.62,192.5,326.15,171.59,320.28,
            8.5859,46.341,266.63,140.77,141.71,216.67,8.5988,139.56,20.429,
            248.25,187.34,27.391,146.25,154.88,237.35,78.621,29.192,168.36,
            262.32,221.03,324.22,91.001,79.234,84.89,291.65,252.87,316.26,
            255.96,237.99,158.25,202.61,356.51,344.63,121.25,55.964,150.15,
            199.61,10.711,312.01,321.99,178.99,75.343,259.77,251.9,165.87,
            61.413,285.97,319.86,51.305,338.28,0.093908,157.97,4.0204,84.426,
            254.51,249.9,95.444,117.57,33.564,14.976,273.34,116.95,187.86,
            342.68,240.83,170.32,233.77,239.63,82.853,289.76,181,156.25,255.25,
            199.9,91.801,27.072,212.08,242.73,211.68,192.13,170.14,116.57,
            155.15,275.36,358.73,95.407,285.14,48.459,12.793,163.42,202.67,
            83.118,52.114,243.75,127.47,183.77,250.09,214.31,182.2,279.5,
            246.67,115.02,299.57,237.9,211.34,6.8682,301.3,41.039,302.55,121.5,
            154.6,285.76,50.964,218.92,335.03,229.12,17.197,251.4,92.559,
            248.72,130.74,195.08,79.971,325.98,134.47,28.374,11.135,225.68,
            337.32,115.18,268.26,104.01,44.767,185.07,139.5,352.3,105.05,
            213.24,205.69,221.71,201.93,100.75,54.666,263.88,14.291,288.58,
            146.31,298.8,349.57,152.09,19.406,283.33,226.83,183.17,204.37,
            111.31,268.97,121.2,318.01,120.12,286.57,289.72,18.086,144.9,
            347.47,149.18,118.99,229.09,308.89,283.78,193.83,267,266.3,160.13,
            306.15,178.03,341.34,287.2,47.896,85.597,45.98,192.28,20.411,
            168.69,353.77,245.6,313.52,178.64,103.56,65.887,346.04,272.25,
            342.13,241.66,66.98,104.34,20.955,15.864,100.64,61.369,243.76,
            324.87,126.72,36.057,285.48,168.64,247.44,245.91,151.72,237.36,
            228.03,189.05,68.861,184.29,269.4,151.14,265.49,247.13,344.06,
            110.85,123.23,139.33,9.4233,228.08,203.49,131.58,151.73,166.39,
            113.2,81.238,41.737,48.228,340.75,177.28,269.36,111.94,2.7739,
            221.62,128.73,233.58,304.55,36.487,211.79,209.66,187.85,163.66,
            348.01,65.631,201.38,225.53,10.847,231.22,301.74,142.25,157.44,
            30.558,209.3,313.81,74.487,34.06,67.663,240.42,263.67,227.16,
            168.55,113.17,230.93,202.33,238.94,44.956,242.65,244.91,334.84,
            298.38,64.116,341.73,71.864,78.365,3.0679,108.23,98.809,211.12,
            142.76,67.105,141.41,55.654,299.63,53.911,244.64,270.03,5.3604,
            51.209,11.036,291.13,16.973,239.83,164.17,289.08,129.04,9.1203,
            78.692,255.93,197.61,313.09,265.98,37.163,349.72,265.94,4.9887};
    int ns = sizeof(slon) / sizeof(float);
    for (int s = 0; s < ns; ++s) {
        slon[s] *= DEG2RAD;
        slat[s] *= DEG2RAD;
    }
    std::vector<float> image(ns * 2); // Beam pattern real & imaginary values.

    srand(10);
    FILE* output = fopen("output.dat", "w");
    float freq = 400; // MHz.
    for (int station = 0; station < 50; ++station) {
        // Generate array of antenna positions.
        int seed = rand();
        float radius = 28.5; // metres.
        float xs = 1.5, ys = 1.5, xe = 0.3, ye = 0.3; // separations, errors.

        int na = oskar_GridPositions::circular(seed, radius, xs, ys, xe, ye);
        printf("Satellite-station %d contains %d antennas.\n", station, na);
        std::vector<float> ax(na), ay(na), az(na); // Antenna positions.
        oskar_GridPositions::circular(seed, radius, xs, ys, xe, ye, &ax[0], &ay[0]);

        // Write antenna positions to file.
        char fname[200];
        sprintf(fname, "arraySatStation%02d.dat", station);
        FILE* file = fopen(fname, "w");
        for (int a = 0; a < na; ++a) {
            fprintf(file, "%12.3f%12.3f\n", ax[a], ay[a]);
        }
        fclose(file);

        // Call CUDA beam pattern generator.
        TIMER_START
        oskar_cudaf_bp2hc(na, &ax[0], &ay[0], ns, &slon[0],
                &slat[0], beamAz * DEG2RAD, beamEl * DEG2RAD,
                2 * M_PI * (freq * 1e6 / C_0), 0, 0, 1.0f, 0.0f, &image[0]);
        TIMER_STOP("Finished beam points (station %d)", station);

        // Write image data to file.
        for (int s = 0; s < ns; ++s) {
            fprintf(output, "%14.5f%14.5f%17.5e%17.5e\n",
                    slon[s] * RAD2DEG, slat[s] * RAD2DEG,
                    image[2*s], image[2*s+1]);
        }
    }

    // Do the same for the super-station.
    // Generate array of antenna positions.
    int seed = rand();
    float radius = 21.2; // metres.
    float xs = 0.375, ys = 0.375, xe = 0.0, ye = 0.0; // separations, errors.

    int na = oskar_GridPositions::circular(seed, radius, xs, ys, xe, ye);
    printf("Super-station contains %d antennas.\n", na);
    std::vector<float> ax(na), ay(na), az(na); // Antenna positions.
    oskar_GridPositions::circular(seed, radius, xs, ys, xe, ye, &ax[0], &ay[0]);

    // Write antenna positions to file.
    FILE* file = fopen("arraySupStation.dat", "w");
    for (int a = 0; a < na; ++a) {
        fprintf(file, "%12.3f%12.3f\n", ax[a], ay[a]);
    }
    fclose(file);

    // Call CUDA beam pattern generator.
    TIMER_START
    oskar_cudaf_bp2hc(na, &ax[0], &ay[0], ns, &slon[0],
            &slat[0], beamAz * DEG2RAD, beamEl * DEG2RAD,
            2 * M_PI * (freq * 1e6 / C_0), 0, 0, 1.0f, 0.0f, &image[0]);
    TIMER_STOP("Finished beam points (super-station)");

    // Write image data to file.
    for (int s = 0; s < ns; ++s) {
        fprintf(output, "%14.5f%14.5f%17.5e%17.5e\n",
                slon[s] * RAD2DEG, slat[s] * RAD2DEG,
                image[2*s], image[2*s+1]);
    }
    fclose(output);
}

/**
 * @details
 * Tests beam pattern creation using CUDA.
 */
void CudaBeamPatternTest::test_stations4000()
{
    // Set beam direction.
    float beamAz = 0;  // Beam azimuth.
    float beamEl = 90; // Beam elevation.

    // Set up test source positions for the hemisphere.
    float slat[] = {89.92,89.74,89.57,89.53,89.28,88.527,86.962,86.961,86.786,86.784,86.527,86.508,86.285,85.663,85.474,85.473,85.179,85.126,84.985,84.983,84.894,84.457,84.214,84.132,84.048,83.764,83.759,83.729,83.597,83.573,83.427,83.235,83.161,83.096,83.035,82.792,82.629,82.391,82.236,82.018,81.836,81.651,81.475,81.472,81.348,81.276,81.242,81.222,81.1,81.097,80.995,80.915,80.698,80.474,80.441,80.124,80.082,80.018,79.742,79.712,79.71,79.703,79.576,79.552,79.5,79.431,79.323,79.263,79.178,79.132,78.893,78.693,78.568,78.461,78.142,78.128,78.114,78.021,77.896,77.632,77.6,77.464,77.369,77.118,77.052,77.026,77.003,76.914,76.862,76.825,76.758,76.741,76.689,76.558,76.507,76.469,76.424,76.391,76.357,76.311,76.272,76.262,76.176,76.096,76.054,76.038,75.998,75.988,75.962,75.922,75.883,75.875,75.833,75.815,75.809,75.796,75.718,75.714,75.58,75.391,75.247,75.228,75.225,75.185,75.173,75.151,75.145,74.894,74.853,74.838,74.798,74.764,74.705,74.698,74.616,74.394,74.357,74.272,74.245,74.069,74.037,74.005,73.991,73.986,73.768,73.737,73.667,73.656,73.638,73.567,73.559,73.479,73.431,73.358,73.275,73.235,73.199,73.159,72.887,72.831,72.818,72.818,72.799,72.745,72.703,72.684,72.571,72.565,72.537,72.527,72.525,72.521,72.466,72.429,72.414,72.414,72.398,72.35,72.319,72.266,72.193,72.155,72.14,72.135,72.102,72.089,72.066,72.007,71.976,71.905,71.878,71.873,71.87,71.803,71.694,71.666,71.645,71.47,71.435,71.428,71.377,71.354,71.341,71.336,71.249,71.215,71.178,71.143,71.129,71.082,71.075,70.974,70.958,70.919,70.826,70.818,70.797,70.779,70.771,70.688,70.667,70.664,70.653,70.613,70.582,70.551,70.522,70.506,70.48,70.271,70.137,70.082,69.996,69.92,69.9,69.868,69.848,69.83,69.759,69.746,69.722,69.654,69.628,69.569,69.553,69.535,69.531,69.531,69.459,69.36,69.323,69.281,69.27,69.266,69.23,69.173,69.095,69.034,68.917,68.893,68.844,68.798,68.78,68.78,68.741,68.728,68.711,68.702,68.7,68.666,68.556,68.533,68.528,68.474,68.471,68.454,68.43,68.427,68.347,68.261,68.168,68.123,68.082,68.047,68.046,68.015,67.982,67.95,67.947,67.914,67.891,67.865,67.851,67.828,67.775,67.768,67.703,67.684,67.666,67.624,67.533,67.512,67.398,67.325,67.247,67.122,67.084,67.012,66.977,66.932,66.931,66.884,66.879,66.864,66.859,66.827,66.821,66.819,66.791,66.773,66.77,66.769,66.608,66.552,66.51,66.378,66.349,66.337,66.309,66.221,66.208,66.169,66.124,66.084,66.061,66.018,65.997,65.945,65.884,65.811,65.79,65.781,65.716,65.687,65.57,65.524,65.499,65.464,65.454,65.45,65.422,65.399,65.393,65.381,65.374,65.326,65.305,65.203,65.126,65.105,65.099,65.068,65.04,64.956,64.895,64.889,64.888,64.886,64.879,64.861,64.844,64.83,64.813,64.813,64.798,64.792,64.787,64.782,64.751,64.727,64.67,64.661,64.657,64.59,64.556,64.549,64.538,64.498,64.478,64.472,64.431,64.42,64.396,64.39,64.361,64.318,64.306,64.287,64.285,64.27,64.237,64.233,64.156,64.132,64.097,64.095,64.083,64.038,63.952,63.935,63.908,63.867,63.786,63.744,63.677,63.67,63.63,63.624,63.619,63.603,63.601,63.573,63.53,63.496,63.452,63.452,63.446,63.438,63.433,63.36,63.31,63.298,63.272,63.254,63.247,63.145,63.123,63.073,63.036,62.96,62.908,62.896,62.877,62.859,62.832,62.747,62.728,62.694,62.685,62.626,62.598,62.594,62.494,62.487,62.47,62.462,62.449,62.426,62.423,62.415,62.39,62.34,62.328,62.266,62.257,62.184,62.091,62.06,62.05,61.961,61.95,61.949,61.934,61.846,61.744,61.739,61.713,61.667,61.641,61.623,61.612,61.555,61.49,61.463,61.429,61.41,61.181,61.144,61.135,61.131,61.116,61.073,61.047,61.026,60.924,60.898,60.862,60.832,60.772,60.76,60.754,60.742,60.725,60.678,60.655,60.615,60.603,60.571,60.563,60.556,60.423,60.413,60.406,60.39,60.339,60.337,60.287,60.189,60.143,60.13,60.078,60.035,59.978,59.963,59.949,59.877,59.84,59.831,59.826,59.765,59.741,59.728,59.707,59.67,59.644,59.588,59.573,59.542,59.541,59.539,59.437,59.42,59.38,59.352,59.319,59.314,59.295,59.293,59.238,59.128,59.096,59.081,59.066,59.044,59.042,59.022,58.983,58.975,58.932,58.93,58.883,58.852,58.729,58.705,58.619,58.55,58.548,58.546,58.531,58.529,58.451,58.428,58.289,58.282,58.256,58.236,58.195,58.193,58.155,58.048,57.985,57.978,57.967,57.844,57.821,57.796,57.795,57.777,57.767,57.762,57.735,57.563,57.559,57.526,57.524,57.509,57.487,57.478,57.465,57.418,57.395,57.389,57.373,57.343,57.34,57.335,57.328,57.323,57.272,57.247,57.216,57.207,57.206,57.185,57.176,57.157,57.142,57.137,57.128,57.123,57.118,57.104,57.071,57.05,57.038,56.958,56.953,56.946,56.822,56.819,56.79,56.79,56.738,56.721,56.691,56.669,56.632,56.611,56.592,56.55,56.549,56.523,56.503,56.487,56.481,56.457,56.354,56.348,56.336,56.33,56.319,56.314,56.31,56.289,56.281,56.261,56.241,56.174,56.156,56.156,56.104,56.1,56.077,56.007,55.985,55.978,55.97,55.967,55.934,55.931,55.889,55.85,55.797,55.793,55.779,55.772,55.7,55.667,55.663,55.651,55.631,55.621,55.618,55.565,55.551,55.544,55.527,55.495,55.484,55.483,55.443,55.377,55.377,55.326,55.309,55.283,55.264,55.244,55.181,55.162,55.142,55.029,55.015,54.928,54.922,54.921,54.871,54.853,54.842,54.84,54.837,54.833,54.822,54.803,54.757,54.755,54.752,54.642,54.611,54.61,54.546,54.531,54.45,54.444,54.433,54.385,54.372,54.315,54.204,54.202,54.18,54.177,54.173,54.154,54.147,54.127,54.109,54.075,54.047,54.02,53.969,53.96,53.948,53.9,53.841,53.839,53.805,53.776,53.768,53.717,53.702,53.691,53.69,53.66,53.6,53.589,53.585,53.578,53.568,53.546,53.521,53.482,53.455,53.44,53.435,53.417,53.385,53.361,53.307,53.296,53.285,53.256,53.236,53.222,53.163,53.128,53.114,53.103,53.099,53.088,53.066,53.027,52.956,52.945,52.932,52.929,52.919,52.915,52.853,52.841,52.766,52.76,52.751,52.721,52.711,52.64,52.636,52.596,52.568,52.561,52.548,52.54,52.531,52.529,52.52,52.518,52.494,52.469,52.467,52.447,52.427,52.411,52.408,52.391,52.388,52.379,52.375,52.368,52.318,52.311,52.309,52.295,52.277,52.24,52.202,52.171,52.171,52.116,52.028,52.025,52.023,52.01,51.975,51.969,51.965,51.957,51.956,51.95,51.909,51.906,51.893,51.849,51.755,51.753,51.741,51.719,51.704,51.694,51.683,51.64,51.631,51.597,51.59,51.581,51.575,51.574,51.559,51.511,51.491,51.469,51.467,51.422,51.415,51.411,51.402,51.392,51.388,51.356,51.34,51.327,51.278,51.272,51.256,51.25,51.244,51.213,51.213,51.196,51.166,51.128,51.082,51.079,51.079,51.073,51.038,51.029,50.983,50.932,50.879,50.876,50.862,50.828,50.705,50.681,50.653,50.653,50.634,50.63,50.566,50.549,50.471,50.442,50.422,50.381,50.372,50.368,50.314,50.31,50.271,50.256,50.244,50.233,50.208,50.142,50.121,50.115,50.112,50.082,50.065,50.062,50.054,50.053,50.024,50.02,50.019,49.999,49.998,49.969,49.965,49.949,49.932,49.898,49.875,49.868,49.824,49.812,49.81,49.804,49.78,49.727,49.716,49.699,49.677,49.673,49.672,49.621,49.582,49.549,49.528,49.415,49.401,49.393,49.333,49.31,49.31,49.256,49.228,49.224,49.214,49.211,49.211,49.177,49.171,49.164,49.136,49.119,49.103,49.036,48.98,48.948,48.924,48.897,48.869,48.847,48.843,48.798,48.797,48.793,48.785,48.783,48.774,48.707,48.691,48.666,48.634,48.6,48.598,48.528,48.505,48.5,48.497,48.472,48.446,48.436,48.402,48.389,48.35,48.343,48.327,48.322,48.319,48.281,48.275,48.249,48.246,48.239,48.22,48.179,48.174,48.173,48.113,48.111,48.106,48.046,48.006,48,47.953,47.874,47.786,47.771,47.768,47.759,47.751,47.717,47.714,47.708,47.659,47.632,47.622,47.613,47.517,47.517,47.509,47.496,47.393,47.381,47.298,47.29,47.249,47.238,47.231,47.187,47.186,47.14,47.132,47.126,47.094,47.09,47.085,47.073,47.067,47.05,47.043,46.995,46.994,46.97,46.941,46.833,46.823,46.804,46.783,46.783,46.775,46.746,46.739,46.704,46.694,46.664,46.608,46.588,46.566,46.565,46.541,46.51,46.486,46.483,46.464,46.429,46.427,46.419,46.406,46.354,46.323,46.265,46.25,46.187,46.16,46.15,46.053,46.027,45.997,45.994,45.993,45.927,45.921,45.913,45.907,45.895,45.891,45.882,45.88,45.868,45.867,45.828,45.781,45.775,45.75,45.736,45.728,45.717,45.605,45.594,45.586,45.554,45.538,45.535,45.466,45.384,45.349,45.317,45.309,45.272,45.27,45.266,45.227,45.219,45.197,45.19,45.182,45.173,45.156,45.106,45.1,45.062,45.014,44.994,44.99,44.988,44.97,44.926,44.917,44.917,44.891,44.865,44.86,44.854,44.815,44.768,44.759,44.728,44.721,44.642,44.621,44.613,44.598,44.583,44.58,44.575,44.57,44.562,44.552,44.547,44.539,44.524,44.507,44.498,44.404,44.399,44.346,44.339,44.33,44.295,44.294,44.286,44.156,44.138,44.087,44.004,43.992,43.99,43.97,43.961,43.945,43.94,43.909,43.861,43.85,43.843,43.841,43.759,43.749,43.718,43.715,43.711,43.702,43.638,43.613,43.596,43.585,43.584,43.561,43.534,43.524,43.516,43.474,43.42,43.419,43.374,43.358,43.351,43.31,43.298,43.257,43.252,43.247,43.219,43.217,43.211,43.21,43.198,43.173,43.145,43.101,43.085,43.07,43.041,43.017,43.009,42.988,42.942,42.913,42.908,42.877,42.868,42.866,42.859,42.847,42.842,42.81,42.808,42.806,42.797,42.738,42.729,42.726,42.724,42.722,42.649,42.617,42.617,42.614,42.55,42.541,42.541,42.49,42.484,42.446,42.441,42.429,42.42,42.399,42.397,42.395,42.379,42.376,42.33,42.329,42.319,42.278,42.277,42.272,42.256,42.248,42.223,42.19,42.188,42.165,42.153,42.146,42.102,42.064,42.064,42.04,42.028,42.018,41.997,41.993,41.988,41.95,41.9,41.851,41.794,41.783,41.779,41.773,41.771,41.75,41.746,41.731,41.722,41.702,41.701,41.69,41.677,41.655,41.653,41.64,41.64,41.607,41.585,41.555,41.553,41.474,41.442,41.432,41.43,41.406,41.402,41.392,41.382,41.382,41.38,41.373,41.363,41.356,41.346,41.305,41.273,41.271,41.265,41.261,41.258,41.258,41.25,41.247,41.241,41.237,41.182,41.144,41.125,41.118,41.104,41.092,41.085,41.066,41.06,41.053,41.042,41.033,41.031,40.992,40.956,40.943,40.935,40.917,40.901,40.891,40.87,40.861,40.802,40.775,40.77,40.762,40.736,40.73,40.727,40.676,40.67,40.647,40.644,40.636,40.622,40.621,40.616,40.605,40.599,40.598,40.568,40.545,40.525,40.498,40.494,40.489,40.487,40.453,40.439,40.435,40.415,40.413,40.391,40.333,40.3,40.283,40.278,40.278,40.257,40.247,40.209,40.2,40.161,40.003,39.975,39.966,39.962,39.941,39.914,39.901,39.892,39.874,39.86,39.821,39.818,39.807,39.803,39.798,39.792,39.781,39.713,39.701,39.688,39.687,39.683,39.683,39.674,39.654,39.652,39.64,39.607,39.576,39.57,39.536,39.527,39.522,39.495,39.489,39.454,39.441,39.433,39.38,39.361,39.348,39.334,39.331,39.326,39.312,39.312,39.303,39.303,39.296,39.292,39.273,39.271,39.268,39.259,39.239,39.192,39.189,39.17,39.135,39.125,39.124,39.117,39.105,39.104,39.091,39.067,39.064,39.056,39.036,39.027,39.011,38.923,38.922,38.898,38.885,38.88,38.872,38.867,38.866,38.863,38.859,38.859,38.855,38.826,38.822,38.79,38.79,38.79,38.763,38.755,38.744,38.741,38.727,38.7,38.694,38.684,38.684,38.659,38.651,38.648,38.616,38.61,38.603,38.568,38.547,38.514,38.495,38.491,38.485,38.464,38.459,38.452,38.408,38.401,38.374,38.285,38.233,38.229,38.218,38.192,38.18,38.176,38.156,38.146,38.126,38.12,38.111,38.11,38.109,38.082,38.046,38.042,38.014,38.014,38.005,38.002,37.997,37.967,37.954,37.928,37.878,37.87,37.778,37.71,37.686,37.656,37.616,37.615,37.587,37.531,37.53,37.521,37.521,37.509,37.452,37.452,37.45,37.444,37.406,37.405,37.399,37.381,37.334,37.326,37.317,37.314,37.254,37.252,37.24,37.237,37.185,37.17,37.165,37.15,37.131,37.124,37.107,37.09,37.086,37.078,37.076,37.069,37.064,37.056,37.042,37.032,37.018,37.004,37.002,36.983,36.982,36.968,36.96,36.904,36.878,36.857,36.831,36.83,36.809,36.806,36.804,36.769,36.767,36.739,36.734,36.723,36.721,36.715,36.677,36.673,36.66,36.656,36.638,36.616,36.588,36.563,36.563,36.536,36.534,36.522,36.503,36.498,36.489,36.457,36.455,36.454,36.418,36.416,36.397,36.364,36.359,36.323,36.304,36.295,36.287,36.262,36.261,36.233,36.225,36.224,36.212,36.212,36.144,36.102,36.093,36.093,36.06,36.037,36.016,35.996,35.994,35.979,35.962,35.954,35.949,35.906,35.905,35.895,35.884,35.867,35.817,35.81,35.784,35.755,35.68,35.657,35.618,35.573,35.547,35.522,35.513,35.513,35.495,35.494,35.486,35.484,35.451,35.448,35.441,35.406,35.352,35.35,35.34,35.329,35.299,35.295,35.291,35.281,35.278,35.222,35.219,35.205,35.201,35.152,35.151,35.148,35.11,35.095,35.067,34.95,34.947,34.932,34.919,34.911,34.909,34.9,34.896,34.881,34.872,34.859,34.845,34.822,34.819,34.787,34.783,34.764,34.732,34.629,34.601,34.595,34.592,34.589,34.584,34.583,34.57,34.566,34.555,34.532,34.53,34.489,34.489,34.461,34.454,34.45,34.434,34.42,34.419,34.394,34.39,34.382,34.373,34.366,34.365,34.357,34.346,34.262,34.26,34.249,34.24,34.24,34.238,34.231,34.231,34.225,34.196,34.194,34.186,34.148,34.136,34.119,34.078,34.077,34.066,34.022,34.014,33.989,33.981,33.978,33.967,33.938,33.934,33.908,33.908,33.883,33.852,33.843,33.841,33.805,33.738,33.729,33.723,33.709,33.694,33.689,33.681,33.675,33.671,33.659,33.62,33.568,33.557,33.548,33.536,33.498,33.479,33.441,33.426,33.424,33.404,33.399,33.387,33.383,33.359,33.344,33.325,33.293,33.28,33.276,33.261,33.26,33.209,33.205,33.168,33.166,33.14,33.126,33.118,33.094,33.093,33.069,33.054,33.044,33.043,33.04,33.04,33.027,33.013,33.008,32.985,32.948,32.934,32.881,32.86,32.826,32.812,32.793,32.772,32.77,32.75,32.748,32.739,32.709,32.701,32.698,32.684,32.668,32.638,32.616,32.575,32.573,32.558,32.535,32.522,32.516,32.501,32.477,32.441,32.438,32.404,32.402,32.396,32.382,32.358,32.349,32.325,32.32,32.305,32.287,32.286,32.284,32.277,32.256,32.253,32.233,32.232,32.226,32.194,32.177,32.168,32.15,32.12,32.117,32.103,32.085,32.068,32.036,32.016,31.96,31.953,31.909,31.898,31.892,31.871,31.868,31.864,31.78,31.769,31.748,31.706,31.684,31.678,31.652,31.63,31.58,31.571,31.569,31.559,31.542,31.518,31.497,31.49,31.489,31.489,31.481,31.471,31.459,31.455,31.453,31.448,31.438,31.435,31.367,31.364,31.358,31.347,31.329,31.328,31.326,31.314,31.3,31.263,31.195,31.18,31.138,31.131,31.116,31.087,31.073,31.043,31.043,31.008,30.998,30.994,30.981,30.947,30.939,30.936,30.928,30.899,30.899,30.851,30.835,30.82,30.791,30.769,30.766,30.756,30.753,30.744,30.738,30.732,30.719,30.706,30.695,30.693,30.669,30.656,30.648,30.64,30.628,30.605,30.585,30.575,30.505,30.482,30.47,30.455,30.45,30.405,30.351,30.312,30.306,30.273,30.259,30.248,30.229,30.228,30.214,30.184,30.165,30.157,30.124,30.101,30.084,30.059,30.052,30.028,30.027,29.982,29.971,29.966,29.914,29.912,29.909,29.897,29.893,29.886,29.879,29.874,29.865,29.859,29.817,29.814,29.799,29.786,29.766,29.75,29.748,29.708,29.705,29.701,29.698,29.697,29.639,29.627,29.6,29.591,29.558,29.543,29.53,29.524,29.507,29.506,29.501,29.496,29.476,29.414,29.385,29.379,29.37,29.369,29.35,29.334,29.284,29.277,29.266,29.246,29.194,29.187,29.18,29.156,29.126,29.098,29.072,29.053,29.028,28.929,28.9,28.869,28.861,28.83,28.769,28.744,28.738,28.709,28.671,28.668,28.66,28.659,28.654,28.611,28.585,28.576,28.528,28.521,28.518,28.516,28.513,28.498,28.482,28.476,28.467,28.435,28.402,28.397,28.396,28.353,28.337,28.326,28.291,28.282,28.276,28.237,28.226,28.204,28.186,28.138,28.103,28.068,28.058,28.019,28.018,28.016,28.012,28.012,27.975,27.966,27.957,27.942,27.933,27.918,27.918,27.898,27.887,27.883,27.856,27.802,27.795,27.769,27.715,27.706,27.701,27.697,27.669,27.654,27.652,27.631,27.627,27.585,27.57,27.567,27.555,27.541,27.529,27.514,27.51,27.495,27.485,27.481,27.46,27.444,27.435,27.435,27.422,27.416,27.412,27.408,27.396,27.382,27.373,27.366,27.329,27.324,27.302,27.289,27.262,27.251,27.186,27.146,27.131,27.043,27.039,27.013,26.997,26.968,26.953,26.952,26.951,26.941,26.938,26.935,26.933,26.895,26.887,26.844,26.825,26.783,26.778,26.777,26.775,26.765,26.759,26.758,26.741,26.707,26.699,26.667,26.644,26.637,26.615,26.608,26.587,26.582,26.575,26.57,26.537,26.535,26.489,26.487,26.452,26.41,26.399,26.396,26.394,26.394,26.381,26.359,26.351,26.328,26.301,26.281,26.279,26.273,26.266,26.263,26.241,26.211,26.206,26.19,26.161,26.138,26.077,26.067,26.064,26.053,26.042,26.032,26.029,26.028,25.984,25.961,25.947,25.941,25.937,25.934,25.933,25.93,25.913,25.896,25.884,25.873,25.827,25.809,25.805,25.796,25.784,25.765,25.763,25.74,25.724,25.724,25.72,25.718,25.702,25.689,25.67,25.652,25.643,25.627,25.591,25.569,25.543,25.53,25.509,25.496,25.481,25.451,25.447,25.432,25.409,25.381,25.381,25.369,25.36,25.347,25.3,25.288,25.281,25.28,25.273,25.267,25.257,25.246,25.244,25.23,25.145,25.12,25.105,25.093,25.079,25.077,25.07,25.061,25.057,25.026,24.997,24.995,24.991,24.963,24.947,24.927,24.925,24.9,24.889,24.87,24.862,24.824,24.818,24.795,24.786,24.764,24.763,24.666,24.65,24.631,24.609,24.603,24.596,24.554,24.519,24.509,24.501,24.48,24.479,24.478,24.47,24.432,24.42,24.355,24.35,24.348,24.335,24.311,24.289,24.286,24.279,24.269,24.258,24.249,24.245,24.24,24.231,24.229,24.198,24.124,24.116,24.085,23.995,23.984,23.981,23.98,23.97,23.955,23.949,23.943,23.936,23.935,23.921,23.904,23.855,23.817,23.745,23.736,23.735,23.672,23.654,23.643,23.628,23.588,23.58,23.565,23.559,23.554,23.551,23.542,23.519,23.519,23.505,23.5,23.488,23.486,23.482,23.481,23.481,23.47,23.47,23.364,23.363,23.362,23.333,23.331,23.31,23.274,23.274,23.251,23.245,23.233,23.209,23.193,23.189,23.18,23.18,23.164,23.148,23.147,23.138,23.133,23.13,23.068,23.024,23.018,23.004,22.96,22.956,22.944,22.938,22.928,22.925,22.879,22.835,22.834,22.821,22.81,22.809,22.8,22.772,22.77,22.765,22.755,22.748,22.734,22.699,22.689,22.685,22.671,22.666,22.657,22.653,22.64,22.63,22.628,22.624,22.599,22.592,22.585,22.575,22.564,22.535,22.521,22.49,22.475,22.448,22.426,22.414,22.398,22.395,22.377,22.356,22.353,22.298,22.279,22.27,22.259,22.252,22.234,22.224,22.212,22.182,22.178,22.174,22.148,22.148,22.13,22.124,22.121,22.111,22.1,22.097,22.092,22.071,22.06,22.055,22.05,22.04,22.03,21.973,21.952,21.94,21.938,21.934,21.932,21.906,21.902,21.887,21.872,21.866,21.86,21.789,21.787,21.745,21.74,21.722,21.696,21.673,21.62,21.597,21.581,21.57,21.537,21.535,21.527,21.523,21.518,21.477,21.475,21.465,21.452,21.439,21.438,21.431,21.422,21.394,21.392,21.386,21.375,21.363,21.343,21.296,21.295,21.283,21.281,21.236,21.206,21.136,21.13,21.127,21.103,21.095,21.084,21.079,21.073,21.057,21.056,21.037,21.035,21.011,21.009,21.004,20.996,20.951,20.94,20.923,20.87,20.825,20.805,20.803,20.783,20.775,20.772,20.768,20.761,20.736,20.659,20.609,20.536,20.531,20.509,20.504,20.476,20.429,20.424,20.403,20.388,20.379,20.354,20.342,20.331,20.328,20.326,20.303,20.291,20.284,20.272,20.261,20.251,20.25,20.243,20.237,20.23,20.182,20.18,20.177,20.176,20.166,20.165,20.134,20.123,20.08,20.072,20.048,20.043,20.017,19.984,19.979,19.951,19.926,19.901,19.885,19.883,19.871,19.859,19.843,19.817,19.771,19.769,19.76,19.739,19.724,19.718,19.713,19.703,19.683,19.683,19.674,19.656,19.647,19.64,19.632,19.631,19.602,19.585,19.567,19.514,19.51,19.507,19.502,19.494,19.491,19.486,19.484,19.482,19.481,19.453,19.414,19.413,19.379,19.374,19.369,19.354,19.347,19.346,19.322,19.31,19.31,19.309,19.308,19.301,19.233,19.23,19.207,19.191,19.186,19.18,19.153,19.146,19.111,19.111,19.102,19.086,19.081,19.067,19.061,19.061,19.053,19.05,19.032,19.026,19.019,19.013,19.006,18.991,18.983,18.983,18.974,18.958,18.925,18.917,18.915,18.911,18.894,18.892,18.887,18.875,18.837,18.823,18.816,18.804,18.78,18.735,18.72,18.717,18.714,18.702,18.694,18.682,18.68,18.659,18.637,18.632,18.625,18.604,18.579,18.565,18.552,18.488,18.487,18.45,18.444,18.441,18.435,18.41,18.397,18.389,18.36,18.36,18.346,18.343,18.343,18.328,18.327,18.322,18.29,18.289,18.289,18.285,18.269,18.258,18.249,18.242,18.222,18.209,18.19,18.169,18.138,18.126,18.116,18.095,18.088,18.063,18.055,18.033,18.01,18.01,17.994,17.946,17.934,17.933,17.908,17.881,17.87,17.842,17.837,17.808,17.792,17.791,17.756,17.751,17.73,17.683,17.677,17.671,17.666,17.655,17.651,17.623,17.598,17.592,17.592,17.56,17.527,17.522,17.515,17.515,17.497,17.495,17.482,17.479,17.464,17.461,17.46,17.459,17.456,17.454,17.445,17.444,17.437,17.436,17.389,17.345,17.345,17.297,17.278,17.265,17.251,17.244,17.242,17.235,17.228,17.202,17.19,17.183,17.183,17.181,17.179,17.176,17.17,17.158,17.151,17.144,17.095,17.084,17.08,17.071,17.06,17.055,17.037,17.027,17.013,16.996,16.981,16.98,16.979,16.976,16.967,16.967,16.945,16.924,16.893,16.873,16.848,16.844,16.844,16.836,16.83,16.807,16.803,16.794,16.78,16.753,16.751,16.743,16.733,16.718,16.713,16.696,16.691,16.682,16.668,16.652,16.65,16.64,16.638,16.629,16.608,16.588,16.576,16.569,16.547,16.53,16.517,16.494,16.49,16.464,16.438,16.437,16.433,16.41,16.383,16.377,16.361,16.357,16.338,16.304,16.301,16.284,16.278,16.276,16.258,16.252,16.249,16.238,16.234,16.214,16.195,16.187,16.153,16.059,16.036,16.024,16.012,15.989,15.974,15.968,15.965,15.963,15.951,15.938,15.93,15.922,15.908,15.898,15.893,15.887,15.878,15.864,15.857,15.848,15.826,15.824,15.816,15.811,15.796,15.783,15.72,15.683,15.675,15.664,15.648,15.633,15.584,15.568,15.566,15.556,15.555,15.555,15.526,15.512,15.507,15.506,15.505,15.499,15.478,15.445,15.44,15.432,15.422,15.39,15.374,15.37,15.368,15.352,15.341,15.323,15.289,15.289,15.288,15.264,15.257,15.238,15.216,15.214,15.208,15.194,15.147,15.129,15.12,15.103,15.073,15.071,15.069,15.063,15.062,15.061,15.048,15.048,15.037,15.036,15.01,15.01,14.961,14.957,14.933,14.899,14.88,14.874,14.856,14.834,14.786,14.78,14.775,14.774,14.724,14.698,14.698,14.692,14.692,14.686,14.676,14.642,14.628,14.627,14.618,14.609,14.574,14.553,14.547,14.542,14.528,14.52,14.497,14.487,14.482,14.476,14.469,14.464,14.458,14.455,14.415,14.38,14.37,14.358,14.352,14.341,14.332,14.29,14.287,14.282,14.279,14.278,14.269,14.269,14.243,14.233,14.222,14.214,14.19,14.175,14.174,14.174,14.129,14.128,14.104,14.083,14.042,13.978,13.962,13.952,13.944,13.925,13.924,13.903,13.9,13.863,13.838,13.828,13.755,13.745,13.742,13.73,13.73,13.679,13.662,13.659,13.654,13.651,13.644,13.639,13.632,13.599,13.595,13.579,13.576,13.563,13.558,13.535,13.507,13.494,13.494,13.43,13.419,13.415,13.408,13.39,13.378,13.372,13.349,13.349,13.342,13.338,13.33,13.306,13.305,13.297,13.293,13.275,13.273,13.271,13.248,13.246,13.24,13.224,13.22,13.187,13.168,13.159,13.12,13.112,13.106,13.093,13.057,13.053,13.047,13.046,13.042,13.035,13.024,13.015,12.89,12.84,12.835,12.802,12.794,12.752,12.735,12.735,12.715,12.695,12.678,12.66,12.657,12.654,12.646,12.645,12.626,12.623,12.615,12.61,12.608,12.605,12.594,12.573,12.573,12.557,12.553,12.488,12.482,12.478,12.468,12.46,12.451,12.421,12.406,12.371,12.367,12.339,12.339,12.314,12.272,12.253,12.23,12.124,12.101,12.081,12.07,12.058,12.052,12.051,12.036,12.035,12.02,11.996,11.955,11.955,11.948,11.944,11.944,11.941,11.935,11.933,11.932,11.864,11.848,11.843,11.83,11.827,11.799,11.784,11.769,11.76,11.693,11.688,11.661,11.659,11.63,11.592,11.584,11.551,11.541,11.538,11.534,11.528,11.516,11.515,11.485,11.458,11.449,11.431,11.421,11.391,11.337,11.253,11.248,11.238,11.212,11.207,11.177,11.174,11.172,11.14,11.136,11.128,11.103,11.071,11.06,11.028,11.017,11.015,11.006,11.004,10.996,10.991,10.978,10.945,10.919,10.903,10.902,10.888,10.871,10.852,10.852,10.848,10.833,10.8,10.796,10.794,10.792,10.788,10.755,10.743,10.733,10.723,10.713,10.697,10.689,10.676,10.667,10.661,10.64,10.628,10.618,10.604,10.59,10.564,10.556,10.546,10.528,10.513,10.504,10.497,10.469,10.462,10.444,10.441,10.432,10.402,10.4,10.397,10.369,10.363,10.318,10.259,10.246,10.199,10.192,10.146,10.144,10.124,10.097,10.086,10.044,10.024,10.023,10.022,10.018,10.007,9.9983,9.9932,9.9658,9.9501,9.9481,9.9088,9.9009,9.8923,9.8792,9.8713,9.8703,9.8678,9.8387,9.8223,9.8151,9.8106,9.8043,9.8038,9.8,9.7904,9.7761,9.7683,9.7589,9.7485,9.7422,9.7411,9.7227,9.6766,9.608,9.6009,9.5918,9.5904,9.5871,9.5699,9.5685,9.5561,9.5416,9.5383,9.5297,9.5246,9.4897,9.4561,9.4193,9.379,9.3782,9.3737,9.3692,9.3612,9.335,9.288,9.2854,9.257,9.256,9.2347,9.2313,9.228,9.1734,9.1678,9.1531,9.1429,9.1375,9.1169,9.1013,9.083,9.0744,9.0737,9.0711,9.0553,9.0494,9.0394,9.0152,9.0106,8.9521,8.9436,8.9432,8.941,8.9288,8.9283,8.9053,8.8932,8.8622,8.8392,8.8379,8.7981,8.7963,8.7912,8.7786,8.7649,8.7641,8.7563,8.7486,8.7343,8.7341,8.7138,8.7065,8.691,8.6604,8.6509,8.6319,8.6278,8.616,8.6126,8.6042,8.5959,8.5919,8.5802,8.5723,8.5386,8.509,8.5049,8.4806,8.4773,8.4596,8.4237,8.4095,8.3988,8.3921,8.363,8.3281,8.3273,8.3235,8.2886,8.2871,8.2868,8.2209,8.2178,8.2034,8.2012,8.1934,8.1905,8.1799,8.1779,8.1759,8.1414,8.1386,8.1244,8.1198,8.109,8.0281,7.9925,7.9893,7.9754,7.9418,7.9237,7.9069,7.892,7.8836,7.8714,7.8277,7.8063,7.7868,7.7826,7.7558,7.7439,7.7416,7.7414,7.736,7.7346,7.7206,7.7152,7.7043,7.7038,7.6988,7.6855,7.6843,7.6779,7.6704,7.6693,7.653,7.6456,7.6422,7.642,7.6357,7.6345,7.6065,7.5981,7.5883,7.587,7.5858,7.5774,7.542,7.5202,7.5191,7.5072,7.4472,7.4455,7.4372,7.422,7.4126,7.4102,7.3959,7.3893,7.372,7.3645,7.3638,7.353,7.3381,7.3232,7.3186,7.3033,7.2567,7.2183,7.2073,7.205,7.1995,7.175,7.1737,7.1737,7.1435,7.1416,7.1313,7.1159,7.0836,7.0789,7.0663,7.0471,7.0125,6.9639,6.9053,6.8871,6.8842,6.8728,6.8442,6.842,6.8047,6.7856,6.7606,6.754,6.7504,6.7242,6.7159,6.7052,6.6805,6.674,6.6577,6.6155,6.5915,6.5855,6.5845,6.5494,6.5476,6.5458,6.5318,6.5296,6.5039,6.4876,6.471,6.4566,6.4232,6.4121,6.4086,6.407,6.3937,6.3815,6.3712,6.3227,6.3204,6.3061,6.2954,6.2705,6.252,6.2488,6.2237,6.1861,6.1351,6.1306,6.1301,6.109,6.1003,6.0871,6.0456,5.9995,5.9841,5.9816,5.9679,5.9507,5.9252,5.9155,5.9073,5.9054,5.8958,5.8853,5.8598,5.8407,5.8285,5.8171,5.8091,5.8042,5.7958,5.789,5.7785,5.7483,5.7277,5.7176,5.6994,5.6867,5.6826,5.6689,5.6458,5.6449,5.6337,5.6234,5.577,5.5765,5.5455,5.5431,5.5344,5.5338,5.5069,5.4987,5.4664,5.4662,5.4582,5.4452,5.44,5.4333,5.4289,5.4144,5.4024,5.3824,5.3705,5.3539,5.3497,5.3463,5.3435,5.3197,5.3092,5.3015,5.2933,5.2919,5.2749,5.2137,5.1976,5.19,5.1857,5.176,5.1664,5.1597,5.1319,5.1312,5.1187,5.1109,5.0976,5.0876,5.0354,5.0174,5.0103,5.0063,4.9888,4.985,4.9671,4.9612,4.9574,4.926,4.8733,4.8715,4.8693,4.8658,4.8509,4.8015,4.8013,4.796,4.7514,4.6944,4.6857,4.6683,4.6645,4.6511,4.6497,4.6085,4.5925,4.5726,4.5485,4.5482,4.5205,4.5161,4.5101,4.5051,4.4873,4.4515,4.4386,4.4115,4.411,4.4058,4.3995,4.3839,4.3823,4.3724,4.3724,4.3704,4.3654,4.3637,4.3379,4.3303,4.3127,4.3083,4.2923,4.2868,4.2845,4.2828,4.2806,4.2744,4.2487,4.2352,4.2266,4.2088,4.1943,4.1008,4.0809,4.0688,4.0574,4.0535,4.0432,4.0316,4.0309,4.0146,3.9571,3.9553,3.952,3.9299,3.9282,3.9272,3.9169,3.8785,3.8691,3.8654,3.8615,3.8578,3.8326,3.818,3.8142,3.7576,3.7519,3.7312,3.7311,3.7223,3.6765,3.6696,3.6609,3.6514,3.6429,3.6351,3.6036,3.5633,3.5631,3.5571,3.5446,3.5207,3.5189,3.5001,3.4805,3.4803,3.4794,3.4606,3.4453,3.4182,3.4087,3.3912,3.3846,3.3505,3.3369,3.3321,3.3265,3.3177,3.3101,3.2873,3.257,3.2531,3.2502,3.2269,3.2259,3.2157,3.2021,3.196,3.1924,3.1844,3.1752,3.1562,3.1489,3.1264,3.1174,3.09,3.0779,3.0493,3.0017,2.9927,2.9774,2.9751,2.9708,2.9571,2.9496,2.9438,2.9332,2.9185,2.8921,2.8862,2.8797,2.8385,2.8168,2.8134,2.7975,2.7963,2.7773,2.7757,2.7656,2.7616,2.7529,2.7381,2.7245,2.7035,2.7023,2.6689,2.6672,2.6299,2.6169,2.6132,2.6019,2.5879,2.5729,2.5261,2.5256,2.5114,2.506,2.4765,2.4723,2.4696,2.4626,2.4167,2.4094,2.3986,2.3842,2.369,2.3325,2.3206,2.3084,2.3065,2.2972,2.285,2.2808,2.2788,2.2752,2.2641,2.2359,2.2174,2.1931,2.1355,2.132,2.1185,2.1134,2.105,2.0903,2.0843,2.0823,2.082,2.0365,2.0071,1.9767,1.9609,1.954,1.952,1.9517,1.9207,1.9201,1.9134,1.9091,1.8985,1.8768,1.8691,1.8526,1.8268,1.816,1.8159,1.8084,1.7884,1.7879,1.7724,1.7567,1.7518,1.7509,1.7266,1.7049,1.6913,1.6766,1.6707,1.6668,1.6662,1.6638,1.6603,1.6562,1.6348,1.6205,1.6147,1.6121,1.6041,1.5903,1.57,1.5616,1.544,1.5392,1.5379,1.5028,1.4999,1.4815,1.4795,1.4711,1.4517,1.4361,1.4213,1.4143,1.3702,1.3687,1.3666,1.3306,1.3187,1.2966,1.2533,1.2511,1.2261,1.2205,1.2028,1.1389,1.1358,1.1117,1.0932,1.0827,1.0684,1.0659,1.0602,1.0476,1.0326,0.99975,0.97403,0.93801,0.89818,0.89091,0.8905,0.85345,0.85317,0.82834,0.82514,0.82425,0.81525,0.80767,0.8041,0.79401,0.7451,0.73603,0.73087,0.72773,0.72666,0.71106,0.65476,0.64981,0.63988,0.60158,0.59208,0.58228,0.57169,0.54534,0.53782,0.52887,0.52053,0.5148,0.50978,0.50736,0.49667,0.48828,0.47531,0.47258,0.46859,0.45495,0.45326,0.44651,0.44148,0.43903,0.43749,0.42145,0.39608,0.39549,0.39226,0.37877,0.35792,0.34802,0.34583,0.28814,0.28552,0.27551,0.27041,0.24617,0.22194,0.22111,0.20657,0.20371,0.19106,0.17887,0.17553,0.16721,0.15988,0.13457,0.086742,0.08445,0.075675,0.075309,0.057804,0.04633};
    float slon[] = {244.48,60.189,12.499,213.09,84.881,218.82,84.048,51.124,190.86,334.91,222.08,248.36,84.393,74.464,13.452,238.81,182.61,174.89,310.21,347.59,273.49,88.805,243.46,273.35,211.03,296.08,333.66,229.52,6.8176,66.363,9.6267,336.6,174.41,286.12,164.46,177.92,153.26,321.04,314.74,227.93,105.22,105,88.38,253.57,278.86,296.16,290.23,91.358,288.18,226.7,83.341,137.19,163.15,180.2,194.61,124.25,104.91,253.27,336.27,213.9,213.51,265.94,134.15,163.18,183.38,334.34,162.28,229.48,165.37,199.36,14.844,288.79,241.74,72.118,5.2511,274.74,204.3,235.52,228.51,264.36,319.44,239.73,43.443,256.94,161,230.75,233.6,244.22,21.178,80.623,60.473,334.27,185.48,242.41,240.41,29.326,81.026,102.31,328.95,82.477,89.503,243.46,233.46,253.32,301.36,261.83,6.9964,210.15,331.52,33.004,199.64,335.09,71.803,189.12,45.626,269.54,113.28,67.383,352.94,256.62,297.23,245.96,248.18,191.12,67.987,177.49,201.43,298.18,73.033,189.99,290.81,127.84,197.19,258.28,72.904,231.75,0.032046,184.74,205.14,2.5332,321.29,299.95,279.06,283.73,134.51,54.832,126.81,232.24,335.5,33.596,265.96,19.896,272.58,166.86,16.202,303.13,59.296,41.427,97.762,113.18,218.19,243.89,355.55,357.57,272.71,99.021,343.44,147.99,77.984,226.49,5.3529,15.588,64.894,72.167,258.97,159.43,304.38,140.32,301.52,269.43,210.19,57.806,190.38,166.56,136.64,33.563,93.292,120.9,135.04,52.653,114.04,101.24,295.24,123.15,313.92,96.491,279.16,219.32,6.4688,252.54,5.6708,246.2,316.04,155.45,227.28,210.97,81.868,282.48,103.55,332.78,107.45,193.07,120.11,85.426,196.29,38.767,49.376,33.994,111.92,292.55,184.88,311.93,352.98,117.59,79.062,186.56,127.08,309.41,93.607,303.74,209.81,258.99,123.67,3.3386,69.281,182.66,8.7271,198.01,99.426,250.65,317.29,8.8853,122.83,151.71,28.804,28.567,26.055,324.12,348.95,140.87,112.89,199.19,285.14,287.39,310.77,287.27,2.2955,331.16,6.4664,10.59,256.12,193.83,188.85,180.81,23.642,82.815,42.135,356.32,25.386,21.609,238.17,123.86,46.265,229.37,268.74,289.9,96.85,156.23,144.65,218.93,277.23,338.8,47.327,92.06,136.19,357.74,122.74,323.84,85.493,79.2,356.79,342.4,229.76,181.49,128.92,276.64,282.37,10.411,18.879,116.43,287.89,226.88,353.81,56.97,222,111.14,30.628,315.66,212.65,109.12,60.505,122.36,24.281,235.26,87.943,272.85,107.65,150.77,20.1,11.108,67.169,97.526,23.848,120.06,17.966,36.471,25.873,325.62,112.25,213.04,135.95,342.56,267.26,319.35,215.6,248.27,140.8,80.379,47.254,62.092,337.9,12.414,316.64,188.04,290.97,161.13,124.75,272.57,129.68,200.38,319.94,302.46,87.85,156.82,298.28,54.973,272.86,315.54,180.76,205.3,306.53,354.47,284.48,126.25,180.69,91.876,183.55,28.303,20.124,228.6,222.09,29.33,219.43,196.08,308.13,231.37,97.788,38.43,21.785,223.88,251.67,98.978,151.91,131.7,29.577,25.117,43.52,244.03,78.817,85.421,3.1085,261.76,201.97,198.71,267.21,296.87,141.62,48.94,70.468,259.31,241.07,21.546,138.34,176.84,278.7,53.212,174.79,25.861,283.48,141.74,85.018,29.004,28.442,333.87,73.698,344.37,122.31,345.59,123.53,22.832,220.49,200.02,326.32,72.441,283.57,125.18,349.97,300.98,256.25,77.364,5.5612,75.616,193.13,39.045,307.35,327.91,120.14,168.89,1.0429,111.93,174.68,94.38,245.92,328.03,205.38,95.5,334.25,23.128,225.47,341.38,185.9,344.41,97.928,189.72,328.03,77.287,297.64,49.798,157.59,315.1,253.55,178.93,219.45,28.018,86.916,9.2823,304.73,5.3506,198.15,43.082,211.66,224,268.93,111.57,329.94,281.62,36.377,101.2,326.7,39.991,284.34,36.821,276.46,238.34,278.32,335.51,63.678,7.3518,300.11,170.35,39.113,32.06,41.447,60.47,350.1,102.96,215.65,306.8,88.122,261.78,144.28,111.82,235.37,141.06,42.961,352.27,186.57,182.8,117.01,71.018,310.64,96.433,193.93,198.53,346.77,97.047,95.658,111.6,200.63,136.15,88.475,243.42,94.066,346.14,179.13,154,204.41,220.69,290.52,317.08,57.592,32.104,112.73,218.65,136.35,333.2,20.525,357.85,240.1,222.17,53.239,10.439,206.09,10.793,256.15,77.054,91.867,345.09,65.481,287.44,14.415,111.3,348.15,96.116,43.875,218.66,232.33,314.79,323.04,19.144,273.42,309.21,173.42,27.035,32.66,72.078,280.18,146.62,297.73,53.268,263.85,53.961,301.83,196.33,346.02,27.178,336.18,129.39,24.095,347.74,233.8,151.42,214.72,124.95,78.346,13.623,55.233,134.42,315.65,158.81,229.6,139.61,301.39,275.87,45.21,33.358,237.71,135.96,38.805,224.57,223.78,328.19,218.21,174.72,207.63,353.56,186.68,125.53,353.83,357.12,322.62,266.97,239.31,264.01,156.93,143.87,78.441,317.39,339.15,341.62,38.319,20.871,58.941,189.89,25.109,3.6525,33.005,218.68,20.191,236.92,207.3,26.581,86.965,126.43,45.626,266.19,160.44,6.3402,245.41,317.1,50.336,291.91,91.029,8.7788,191.06,336.55,276.96,145.71,258.41,173.28,158.82,339.25,208.36,282.1,257.33,51.18,249.45,141.71,45.996,230.73,179.1,23.03,188.47,113.23,307.76,3.2454,72.931,317.02,78.498,114.37,123.83,288.03,205.59,292.77,31.025,69.169,226.62,22.991,267.47,217.22,287.44,57.814,265.66,272.53,317.27,154.53,67.494,109.09,115.47,159.12,130.28,225.22,337.98,103.29,88.056,331.51,333.44,111.58,27.531,281.12,47.068,166.13,158.46,217.8,45.727,215.66,47.565,41.521,158.79,97.596,339.88,185.99,160.31,111.09,169.06,280.6,60.773,8.0823,255.14,217.85,148.92,329.32,171.79,329.84,178.89,333.92,253.31,250.07,1.6537,194.48,148.67,226.13,195.67,77.759,198.76,310.59,1.7782,45.03,279.03,7.3391,51.348,115.35,325.71,221.1,5.7233,112.1,69.398,99.168,9.6157,299.03,275.14,259.62,296.18,275.24,43.404,138.36,10.052,0.46961,2.5193,60.402,54.157,185.58,150.8,213.77,99.713,213.42,210.65,43.773,28.294,11.544,60.541,188.7,302.89,110.31,68.818,23.443,340.56,88.116,225.15,74.402,87.028,267.63,56.161,296.34,33.835,352.73,235.16,102.28,312.2,10.85,273.94,322.62,222.79,259.47,166.99,273.2,2.5711,69.655,32.923,60.456,339.21,305.8,49.422,237.86,13.856,53.339,66.515,232.33,308.36,307.22,177.85,281.12,98.875,348.26,356.59,30.402,118.73,96.588,77.732,276.13,131.42,55.446,59.408,321.61,340.48,186.29,6.6144,150.95,43.951,342.67,97.265,321.72,322.27,279.19,327.18,6.0049,345.34,27.091,102.65,175.72,349.41,204.52,98.629,46.47,55.869,96.772,156.2,142.53,153.09,221.18,160.85,4.3284,12.338,143.56,352.6,195.4,328.46,116.7,104.59,316.43,280.49,141.99,317.64,153.24,167.9,152.98,163.88,250.35,34.408,264.05,46.806,178.75,93.477,213,81.943,343.84,22.683,65.969,224.73,104.91,49.387,68.016,344.38,106.78,85.393,237.66,1.5465,28.141,111.45,80.629,250.3,252.08,306.65,201.26,205.32,191.13,309.2,160.68,138.02,214.33,109.81,36.399,133.9,79.976,231.56,279.6,154.81,223.58,100.47,172.1,113.31,297.78,267.54,51.952,24.575,191.57,267.82,300.86,259.44,319.54,58.627,72.446,317.51,166.31,67.338,260.96,318.08,287.28,303.47,193.7,75.452,190.96,303.59,77.523,258.02,310.56,169.66,165.78,339.31,226.2,290.3,144.55,115.7,136.37,258.83,69.503,176.4,43.477,50.371,340.99,227.14,157.92,254.79,190.67,234.87,280.15,222.49,180.75,174.73,39.654,329.96,155.74,153.72,10.543,183.75,346.93,99.126,267.63,42.049,276.96,275.66,194.68,60.955,334.84,74.955,7.1138,216.58,218.65,168.79,214.67,260.45,146.92,215.14,153.26,43.863,125.98,196.83,45.756,29.339,104.2,243.65,164.54,179.72,21.052,26.498,121.64,120.99,354.59,270.6,232.75,317.83,184.28,135.43,318.15,88.474,59.041,237.1,92.023,56.737,99.578,107.54,2.1256,82.315,241.24,353.4,92.214,222.9,349.86,177.18,108.37,214.95,195.62,46.717,198.8,53.663,93.078,190.34,292.82,258.67,180.29,321.83,342.26,166.45,103.54,333.49,178.68,315.84,76.766,41.184,44.754,206.68,167.89,134.65,271.66,164.02,254.17,334.62,295.37,14.345,347.83,319.67,229.96,3.9435,351.81,138.79,143.88,183.7,198.59,345.2,307.94,171.61,316.01,140.36,17.699,110.68,115.28,166.07,175.73,254.43,132.23,338.92,96.548,268.34,327.27,210.44,326.34,20.406,200.43,1.0661,55.136,146.7,84.041,192.71,112.18,255.11,211.34,86.109,23.061,1.2129,68.066,176.83,221.93,44.199,47.891,113.11,31.628,147.17,101.63,227.01,79.112,235.53,69.649,34.056,330.61,200.97,150.35,39.761,198.99,40.061,84.968,49.915,118.17,124.72,334.35,319.79,284.42,26.809,151.13,142.82,148.66,350.62,85.642,39.087,288.01,16.133,345.58,288.59,345.81,275.67,218.96,356.05,202.52,178.52,91.095,70.546,177.38,255.92,355.54,120.46,79.259,124.3,32.978,227.38,136.15,319.45,153.55,320.68,80.723,286.89,308.98,153.75,211.99,33.012,90.21,213.76,187.41,329.06,238.79,179.87,228.53,31.09,14.691,270.56,116.55,23.937,332.37,19.57,24.459,206.47,158.11,9.8527,17.892,85.879,45.828,226.92,171.51,39.599,156.76,324.68,203.7,263.03,353.15,211.76,181.14,191.37,218.26,275.15,216.22,260.13,156.68,232.75,63.61,315.53,90.608,128.33,109.2,348.39,69.225,35.231,249.76,34.569,71.779,218.54,255.5,320.59,216.95,310.48,243.34,282.6,193.19,1.6011,71.5,157.94,200.98,138.65,232.87,210.84,275.88,62.868,181.12,137.76,351.79,336.99,321.39,159.67,270.55,327.39,134.39,41.865,189.04,122.81,305.79,67.043,75.148,190.96,30.343,86.677,228.44,39.987,218.64,320.31,176.65,112.86,274.37,343.63,232.52,174.72,157.75,67.098,159.53,175.72,310.01,257.92,223.32,32.319,40.234,207.21,166.2,196.36,13.684,208.54,226.43,173.49,57.79,271.58,285.66,104.89,182.74,85.677,69.366,291.13,24.002,70.51,350.92,207.03,209.96,342.01,36.014,316.34,320.92,77.053,60.103,232.61,64.924,41.958,131.52,144.86,32.332,246.16,196.88,354.95,76.59,330.84,239.46,267.65,136.24,170.92,38.254,318.16,160.24,240.56,262.16,102.83,213.73,133.39,286.43,26.472,357.39,279.37,2.6534,320.02,311.08,251.13,318.6,167.63,133.76,29.888,359,313.14,0.025294,244.79,235.76,148.25,171.49,139.78,162.74,9.6335,153.1,38.09,15.52,200.2,220.06,265.98,92.491,261.45,256.77,181.36,321.4,280.58,178.15,274.14,240.14,352.12,42.146,312.96,204.43,43.254,349.32,302.39,22.434,100.11,147.47,225.65,330.88,149.45,256.14,349.51,156.77,228.74,324.56,313.77,51.378,72.215,223.53,279.01,88.852,133,122.8,164.3,61.497,268.42,35.272,320.5,29.554,281.35,305.52,162.32,217.92,127.61,273.27,212.2,220.17,303.54,164.52,317.8,177.69,224.23,202.38,259.8,196.84,282.4,160.69,328.29,31.171,359.62,261.93,201.03,51.417,301.55,261.09,150.26,98.341,113.29,209.41,248.17,310.99,75.909,182.43,153.02,86.292,272.71,285.09,138.92,114.5,173.13,100.26,56.893,142.35,102.76,87.498,231.31,344.49,67.081,327.43,204.75,69.666,253.53,234.57,119.48,187.76,8.9148,8.0183,287.47,38.812,247.97,279.01,284.94,255.41,340.75,107.29,358.5,199.6,236.19,340.33,80.869,353.35,61.424,338.78,344.51,63.005,19.552,96.555,196.56,279.07,217.35,113.79,156.01,303.4,225.41,98.117,185.23,319.82,62.747,295.22,65.229,35.015,11.273,3.6633,348.28,319.69,17.887,241.27,351.58,79.296,30.261,129.19,263.95,216.77,162.49,328.61,1.1438,183.63,52.006,181.67,204.56,231.18,74.496,122.47,117.89,221.39,212.83,247.65,59.918,234.8,276.71,142.48,142.66,249.16,85.562,341.6,48.871,184.15,14.915,112.47,115.84,341.4,74.643,176.16,160.08,295.51,6.2929,283.87,194.68,16.372,184.99,160.42,176.89,237.56,181.93,267.07,339.79,287.76,157.58,32.513,336.08,136.22,273.21,289.37,289.53,214.49,117,269.41,171.53,185.61,172.83,152.65,63.366,101,315.96,314.59,176.25,218.26,258.37,50.408,209.9,70.2,22.802,23.005,338.35,187.27,54.042,232.77,210.16,112.44,241.97,142.94,79.026,86.695,139.1,12.06,124.82,198.74,201.04,24.053,209.5,171.31,238.3,283,68.41,346.14,192.62,329.23,232.44,55.249,18.786,5.4183,70.691,189.98,53.162,26.328,199.74,353.26,58.63,56.375,58.921,28.256,258.62,160.66,183.64,217.85,317.91,43.89,104.49,22.443,51.672,24.468,66.631,276.72,323.16,186.58,304.07,82.352,154.21,132.58,250.58,339.98,78.439,271.08,187.14,273.63,317.11,85.492,338.29,9.7747,202.15,320.56,60.117,153.09,117.68,204.33,297.72,141.01,223.69,347.45,298.25,292.82,343.83,65.923,241.35,264.81,295.04,245.17,118.82,12.489,43.268,102.14,301.76,324.49,161.98,355.87,12.164,309.4,190.28,351.17,315.8,58.081,127.22,20.882,159.88,158.79,117.61,329.18,178.04,255.69,239.27,299.44,92.893,276.93,147.8,20.036,313.43,350.03,42.111,182.99,272,39.595,12.191,158.8,46.722,349.78,338.46,335.92,354.15,249.49,252.89,133.67,23.078,159.64,195.48,194.46,283.06,216.51,340.92,227.24,316.38,44.167,292.88,351.94,83.248,328.59,243.49,261.02,246.88,286.82,190.67,271.67,181.28,326.53,44.5,306.8,63.016,275.1,165.36,218.18,131.05,144.7,262.83,343.85,316.37,219.5,348.4,228.29,279.82,323.46,81.564,36.456,298.17,152.81,261.75,337.23,106.75,112.39,197.89,198.93,230.54,214.79,58.023,150.45,132.86,28.895,85.071,357.96,327.35,284.68,48.653,198.12,19.382,243.56,296.02,328.1,52.994,109.75,280.75,175.4,197.7,316.16,355.78,6.8948,126.48,192.47,269.21,349.2,250.25,98.377,342.41,326.76,164.67,263.94,200.97,357.8,140.15,317.41,321.58,138.96,261.92,328.55,325.49,29.323,12.003,206.07,3.3445,71.398,7.4449,285.22,68.699,342.75,277.28,293.97,153.38,108.08,244.9,309.07,313.85,322.94,303.69,174.65,175.87,23.52,164.51,214.4,39.63,123.76,95.063,208.86,156.74,149.44,19.517,93.49,87.904,255.27,237.19,42.905,46.519,28.069,264.69,200.21,300.37,38.205,92.362,19.485,236.36,99.877,255.29,46.906,188.64,16.52,36.47,168.82,255.83,216.48,73.77,222.76,251.69,113.34,289.72,64.088,86.87,214.1,312.56,294.72,212.43,0.82362,340.03,285.29,143.76,314.44,242.78,87.252,60.64,310,117.59,117.05,144.06,274.86,59.064,247.78,231.59,295.69,136.28,40.284,309.41,256.75,207,266.81,271.32,199.83,288.33,241.32,192.64,246.93,343.87,225.99,294.89,68.028,270.53,79.769,149.92,284.71,143.99,16.239,72.376,15.431,230.1,90.633,151.16,61.861,318.4,122.77,73.844,286.34,8.8092,14.321,190.73,336.01,216.8,216.42,231.79,331.9,78.933,318.57,17.576,292.33,11.733,149.42,214.08,70.846,286.59,75.956,62.789,220.98,338.78,238.16,77.363,328.89,136.87,12.594,81.844,326.48,312.84,209.69,201.88,0.39191,45.67,77.271,297.66,139.54,114.51,94.24,106.75,154.14,69.266,204.29,236.76,246.81,127.35,344.44,87.746,269.38,140.48,304.11,133.91,254.74,124.44,315.78,270.19,156.39,144.24,134.26,159.57,136.91,26.176,158.5,218.35,109.72,146.39,36.364,171.68,105.27,5.8617,318.39,75.712,246.11,55.581,350.75,180.96,320.91,261.54,178.98,218.6,125.74,189.44,286.89,98.523,105.37,125.33,315.35,33.595,74.405,108.99,126.55,261.63,319.08,18.693,28.281,5.215,69.602,9.4641,168.76,87.618,331.17,257.7,175.91,28.107,190.82,239.78,218.78,151.04,39.887,293.98,89.75,183.3,289.49,183.54,108.97,310.29,20.662,263.07,324.32,167.06,168.97,55.373,346.25,315.45,175.91,146.55,45.567,333.15,2.0092,67.1,116.66,18.067,52.033,262.57,173.62,121.7,85.236,162.31,66.762,116.73,95.03,298.83,250.69,120.07,208.88,103.62,95.029,93.564,243.75,187.14,27.631,20.104,93.142,158.37,102.34,244.36,341.85,278.62,229.01,271.29,268.85,210.97,278.3,141.3,217.9,89.076,104.47,6.9597,125.03,51.046,148.15,55.105,298.44,266.11,35.593,295.43,81.76,38.499,238.6,343.65,293.24,224.37,118.18,99.852,156.38,126.11,315.99,2.2156,250.72,121.7,109.79,233.32,331.61,321.51,358.98,26.238,46.663,353.36,32.487,247.02,334.43,51.054,318.39,7.1143,123.37,85.79,354.44,304.78,286.02,324.1,280.84,301.14,115.59,267.39,239.22,104.11,121.45,327.11,11.61,250.69,75.157,296.69,78.564,35.871,223.02,37.373,287.66,325.05,112.5,101.37,2.4415,178.51,355.85,265.66,111.86,216.15,281.4,40.152,208.56,313.33,248.32,87.469,123.38,196.36,24.326,147.76,85.504,176.03,290.18,136.03,186.47,34.055,327.27,74.747,137.54,237.7,273.01,62.305,186.26,358.32,254.74,29.004,15.591,176.82,160.77,175.25,59.721,129.84,317.06,267.97,150.04,326.65,33.95,65.277,340.77,36.306,139.69,104.12,26.311,70.059,150.29,105.45,252.77,86.297,345.41,109.97,55.77,199.98,284.6,159.79,358.49,157.17,109.6,88.744,345.9,80.237,142.42,80.829,97.209,150.64,359.18,327.97,198.15,214.68,28.492,207.59,323.34,166.79,143.42,37.606,234.81,357.01,244.11,154.25,235.73,211.95,268.22,230.71,181.32,337.69,217.92,230.01,252.96,309.94,136.68,256.36,188.47,130.86,156.48,247.54,81.666,352.44,351.24,104.22,121.84,358.72,284.03,286.17,227.65,292.12,161.31,299.02,45.599,184.78,257.74,89.333,191.48,137.6,288.63,241.51,353.83,337.26,207.46,28.867,148.98,65.104,358.43,187.34,318.7,233.37,167.85,34.301,348.42,223.24,56.161,143.41,317.7,194.05,195.72,159.28,66.148,89.723,102.64,190.62,201.54,149.45,326.04,109.85,233.92,103.96,91.891,128.95,290.13,194.01,212.42,83.211,36.701,232.07,352.85,36.62,67.632,3.3787,301.79,173.28,168.67,327.08,150.17,195.89,251.64,28.458,183.39,175.28,308.12,221.19,42.269,218.47,59.105,143.65,191.65,315.08,237.25,283.55,45.369,188.99,323.81,39.27,228.45,29.105,148.04,256.55,36.152,291.58,229.61,323.3,223.86,149.26,233.12,176.14,33.752,229.44,342.09,171.5,217.01,212.93,81.094,240.64,56.359,278.73,76.699,60.884,261.27,92.228,58.596,225.28,90.269,94.672,303.81,143.07,37.648,69.788,130.71,314.83,215.92,92.921,129.03,319.51,324.19,161.26,96.787,199.37,64.385,309.49,83.511,60.518,9.6202,116.08,199.86,296.83,289.53,8.787,133.74,177.07,167.78,15.017,222.12,208.09,107.57,156.84,49.188,107.9,274.09,12.709,97.02,358.66,160.9,55.003,319.04,11.297,41.773,90.308,273.48,323.39,80.431,242.39,294.76,341.61,314.75,141.75,337.31,157.28,58.508,111.54,245.2,336.26,341.06,215.67,341.59,145.45,14.772,105.78,11.498,311.22,155.72,33.411,49.605,87.11,80.283,312.39,275.1,124.1,138.52,214.15,192.64,120.08,307.69,95.632,336.22,140.34,245.9,99.004,10.065,338.62,192.23,241.62,218.71,270.31,353.28,261.96,308.64,357.06,273.41,52.575,117.47,10.363,250.04,345.15,262.46,265.23,62.86,127.95,206.87,165.58,300.14,293.56,116.62,166.21,242.63,214.28,48.379,7.017,45.039,80.379,161.69,192.43,356.54,258.24,352.82,19.346,229.27,345.74,97.172,341.79,324.8,70.073,264.22,62.95,37.851,113.08,125.56,143.63,102.21,113.01,258.58,340.07,31.604,100.63,214.62,298.24,281.57,200.61,13.06,240.97,305.64,23.567,129.88,92.898,155.73,110.19,347.97,46.776,78.277,321.62,223.81,143.34,128.19,232.77,263.91,263.41,344.94,16.544,152.77,3.2463,253.37,281.12,203.34,8.3863,2.723,356.03,72.593,296.4,129.94,166.05,39.616,281.25,163.24,106.96,129.02,173.68,155.24,251.58,243.02,2.4736,28.436,165.83,279.91,294.04,227.3,131.36,319.5,90.334,23.803,261.77,276.05,323.4,276.06,340.88,192.86,345.52,352.15,187.96,304.33,323.29,335.24,164.75,273.3,337.97,291.85,334.94,160.9,300.2,355.6,133.07,61.476,296.34,211.34,346.18,176.09,91.268,244.16,329.22,222.15,116.1,176.58,146.68,30.218,213.11,316.45,199.19,107.81,322.92,285.95,279.29,215.63,200.6,107.89,197.16,357.06,174.03,246.52,172.81,268.75,76.112,89.455,35.222,255.12,308.07,284.05,267.42,37.628,187.51,304.79,303.7,135.99,97.954,45.109,248.89,199.85,3.0507,149.77,158.08,282.37,298.8,212.26,51.147,213.59,261.43,154.22,75.885,95.538,357.55,173.07,297.99,217.17,294.42,344,234.14,225.95,232.76,22.368,337.75,323.54,250.15,111.75,123.68,27.443,187.14,219.16,261.78,0.026616,61.116,166.78,130.27,342.74,335.59,344.9,74.354,57.492,205.83,213.45,251.5,110.09,141.79,121.28,46.437,31.297,197.62,114.38,357.39,260.48,205.96,258.2,351.56,153.72,328.68,323.03,300.68,17.265,129.34,106.47,226.49,49.026,134.66,311.32,90.098,10.622,359.8,217.85,87.91,157.75,264.63,200.88,157.8,217.28,65.16,291.16,294.86,175.4,271.82,145.57,261.24,55.443,183.27,240.49,54.927,22.571,121.36,160.54,272.75,46.992,324.54,79.322,136.28,152.19,350.17,63.726,317.62,198.45,115.74,323.94,195.16,166.64,290.87,129.89,349.56,199.99,277.14,244.84,73.872,300.46,311.57,14.947,221.11,98.381,268.81,175.63,285.26,188.81,215.1,79.211,131.05,107.01,306.58,350.53,224.5,321.22,353.12,232.91,287.57,145.75,173.65,23.001,289.05,126.39,305.74,357.05,174.36,128.29,19.574,329.07,253.79,157.71,348.52,260.58,236.45,185.32,315.74,21.663,169.73,111.97,70.09,54.378,324.51,25.437,345.02,251.96,4.3235,1.7569,307.18,168.22,301.22,79.425,290.15,89.489,359.38,337.64,199.42,328.57,228.78,280.83,204.2,69.034,326.25,185.35,359.63,135.84,74.2,262.78,112.84,42.329,319.9,249.52,338.36,150.18,293.68,289.74,129.75,328.97,103.79,59.401,164.11,87.414,0.69194,221.52,238.04,237.72,244.97,306.23,13.433,245.08,205.61,248.48,322.4,96.07,24.68,112.9,284.1,179.4,157.33,60.626,95.243,246.2,293.99,253.99,207.55,357.86,166.03,177.61,98.625,235.84,146.54,107.99,217.96,284.82,349.52,278.42,215.99,161.66,55.25,76.044,252.13,344.23,228.77,320.86,77.863,246.08,113.42,9.1392,295.29,155.76,31.934,336.63,140.68,211.66,86.341,235.28,131.95,173.25,144.61,120.17,96.331,276.42,86.537,346.06,332.48,98.729,80.38,90.764,88.918,86.247,154.17,297.33,222.19,69.795,290.91,354.83,53.497,307.09,85.897,150.1,116.06,156.25,117.87,35.629,241.62,17.769,72.359,179.69,99.151,151.06,214.92,17.692,319.2,308.99,30.622,63.87,4.8235,212.39,254.83,273.21,77.03,347.82,174.38,22.489,64.245,121.77,316.97,15.379,127.95,230.67,298.04,16.064,284.7,18.414,106.71,97.971,328.84,217.97,180.8,265.18,40.364,318.42,190.64,1.9778,58.632,94.437,13.993,245.54,10.151,179.98,173.05,100.27,212.58,103.47,331.18,2.183,203.23,132.73,133.69,7.63,247.41,199.64,275.56,284.88,88.762,71.93,132.1,259.05,45.131,154.76,5.8873,25.567,255.71,289.06,327.67,328.36,226.63,47.338,22.369,279.92,267.17,225.33,262.47,73.085,286.2,350.85,151.25,88.459,172.84,240.83,306.86,340.32,46.344,250.79,28.83,37.283,47.231,185.42,173.44,160.52,287.34,190.42,240.78,174,119.77,93.169,350.53,95.17,284.38,178.94,115.48,221.86,2.4819,22.656,331.21,326.22,299.35,328.92,244.5,279.74,249.72,71.588,162.86,284,0.69284,200.01,155.97,21.03,159.11,302.25,222.57,266.97,336.83,117.11,268.56,314.24,155.98,187.76,234.96,168.84,65.988,81.361,148.3,5.505,270.24,22.364,155.41,195.4,219.65,157.04,29.185,102.22,26.362,262.79,124.7,234.79,173.43,137.73,117.68,37.094,133.35,135.88,173.45,286.42,248.9,305.92,184.42,307.81,167.56,95.345,226.61,202.58,194.82,141.59,151.37,49.364,105.18,2.6364,335.77,219.33,321.06,151.5,144.07,199.42,214.65,182.26,211.4,47.816,274.18,234.41,126.39,112.53,98.73,53.831,120.36,299.89,84.087,24.927,178.1,43.974,144.94,32.837,259.4,123.24,203.87,235.62,234.9,252.31,108.4,30.767,228.04,95.916,321.93,108.1,257.42,118.93,131.35,213.25,325.87,95.23,341.94,265.94,1.606,306.27,250.41,202.48,121.58,119.81,27.836,164.99,236.59,205.9,144.76,336.49,129.79,341.18,10.844,158.79,252.26,253.08,183.66,220.41,268.69,288.52,121.22,203.07,307.9,212.1,182.97,307.23,246.17,38.282,180.7,6.9,159.34,326.58,16.081,340.27,64.937,133.17,73.886,34.411,155.79,99.922,36.309,179.61,86.052,125.86,200.97,197.3,151.66,138.78,137.04,101.06,64.768,45.822,5.6485,271.11,181.78,259.96,274,96.822,69.704,23.094,153.13,252.77,351.84,198.57,15.77,209.57,100.22,195.19,159.6,42.194,136.78,275.34,330.61,249.37,349.42,45.419,232.71,139.27,202.44,71.406,141.81,122.49,128.33,134.29,41.531,180.44,294.09,123.66,179.47,42.489,207.19,185.57,127.9,310.81,123.85,164.48,85.712,277.62,98.426,189,191.2,314.42,337.54,17.538,352.38,227.64,26.148,76.257,129.56,153.61,272.93,329.67,226.71,344.13,271.84,189.4,306.04,293.77,47.567,273.86,222.2,143.15,302.86,13.795,34.634,341.32,142.57,191.61,325.31,122.41,239,261.85,80.285,199.96,163.88,219.7,195.84,186.61,102.98,316.45,337.16,290.24,348.87,188.72,40.633,234.08,68.719,308.5,339.43,37.241,106.72,287.65,159.02,177.31,10.626,206.15,206.09,267.01,27.578,283.38,69.658,191.13,332.69,354.98,351.11,109.72,271.31,74.288,310.1,236.82,36.794,208.97,346.86,304.15,271.12,253.1,88.785,14.379,166.36,42.255,58.183,151.11,239.8,350.34,100.67,191.3,335.05,59.998,284.13,37.068,318.1,188.01,350.69,272.2,260.13,0.93643,74.021,93.733,28.784,264.72,296.15,123.62,49.01,239.72,298.96,242.5,50.205,136.38,244.21,185.73,352.1,96.381,312.09,134.55,49.187,29.769,265.98,133.94,136.99,108.78,106.03,93.533,166.85,355.63,138.63,339.56,60.12,333,271.56,308.38,216.86,38.652,163.97,235.65,20.712,7.6546,104.33,335.33,185.05,315.11,136.12,318.42,192.52,321.34,36.995,76.336,252.58,130.09,0.50246,138.35,115.25,141.6,65.25,75.376,213.74,214.01,62.089,335.88,20.238,72.621,182.97,273.32,52.579,335.19,151.9,20.34,242.71,100.73,280.83,346.62,247.77,179.43,35.652,103.59,193.72,4.0788,101.82,212.25,61.937,61.235,243.48,205.05,198.6,348.28,226.23,116.84,187.57,311.38,357.88,301.86,125.06,269.79,338.19,240.51,173.23,103.02,214.26,121.11,345.44,159.15,346.32,243.5,254.19,344.77,338.36,300.15,55.887,298.96,167.09,107.53,188.39,299.39,194.09,93.539,127.45,67.226,126.24,68.299,300.85,138.29,3.4199,111.25,301.23,101.28,281.28,191.35,55.409,189.09,101.97,257.35,264.38,161.87,65.548,48.795,98.198,228.83,290.23,240.44,103.17,51.279,88.515,249.08,25.829,179.52,354.96,325.76,207.07,275.95,268.84,250.32,243.83,101.66,209.47,222.79,293.13,5.7553,77.167,355.63,294.24,227.55,245.57,290.96,100.68,239.39,10.557,195.98,190.43,314.34,67.539,335.33,351.49,119.23,224.54,189.74,165.27,129.08,120.34,29.95,140.54,86.164,175.06,252.03,49.417,297.53,334.82,298.34,174.58,237.52,164.3,150.65,12.347,333.67,15.617,171.38,138.87,192.26,359.34,324.89,5.312,280.99,174.7,140.48,296.31,314.79,359.41,70.438,313.19,110.7,148.05,293.88,132.57,153.44,32.838,240.3,263.27,108.29,121.68,264.36,354.76,251.56,32.375,169.47,228.73,189.1,50.882,99.186,355.36,286.2,336,125.41,75.288,244.93,127.95,157.81,327.16,300.09,140.9,264.23,104.64,105.17,106.85,8.9433,330.42,246.97,84.34,179.05,284.61,136.88,78.69,260.16,278.22,249.58,223.08,274.43,184.13,118.59,0.48386,209.03,61.862,70.167,54.116,181.95,6.2593,169.63,16.588,159.22,58.881,205.96,294.6,30.723,83.821,88.577,126.7,147.27,41.128,146.6,243.34,195.49,128.57,238.17,244.33,47.362,158.26,337.39,205.28,207.95,275.26,88.903,249.79,106.15,205.45,228.53,143.6,89.598,336.72,161.6,191.44,228.54,240.52,158.04,62.276,249.98,332.97,133.42,229.96,320.28,173.86,226.73,167.41,39.302,40.722,38.841,160.46,337.98,228.17,334.68,22.635,110.5,341.92,3.7312,60.418,271.9,300.18,218.11,186.45,339.43,266.83,252.39,268.1,314.58,347.08,353.49,330.71,102.05,21.105,295.56,64.628,12.575,277.68,194.59,119.35,208.16,307.62,231.26,151.24,196.53,65.627,85.059,73.949,93.487,339.35,230.97,298.46,139.95,60.628,266.44,314.21,127.99,64.378,358.71,345.29,56.159,334.42,152.85,80.31,49.102,93.663,196.01,29.595,215.33,10.507,163.77,119.7,339.72,109.12,154.16,237.97,137.19,49.021,34.786,109.86,296.6,225.81,74.136,352.87,157.6,300.67,194.1,9.0457,2.4567,282.99,161.06,103.95,310.74,236.24,102.49,232.04,94.889,62.92,132.7,193.52,333.51,269.68,53.185,1.0396,45.725,330.09,241.96,40.964,345.68,42.978,177.27,130.07,169.2,21.161,118.8,95.227,88.53,341.16,11.679,326.21,132.66,238.51,343.3,33.886,246.71,148.48,40.244,177.06,166.16,315.74,237.69,100.07,236.58,232.35,323,317.64,120.66,153.72,289.36,332.31,312.02,179.87,210.41,332.91,59.802,134.77,93.387,298.97,25.264,101.17,199.82,222.83,147.52,93.034,150.03,137.54,34.68,47.262,219.56,236.23,302.76,179.93,110.59,61.115,17.556,81.294,132.11,204.42,205.1,280.36,212.49,39.839,230.64,25.927,131.7,103.43,266.92,24.115,272.58,86.657,83.128,4.3158,47.691,75.379,77.106,326.09,99.998,34.957,281.82,240.31,220.56,123.77,248.52,84.081,110.89,128.63,78.011,243.82,264.97,3.6067,128.13,86.384,333.94,274.68,136.58,246.94,251.59,212.54,346.34,281.28,193.83,33.89,318.96,92.698,166.86,119.09,272.44,289.03,289.12,315.59,31.491,240.45,180.87,120.8,211.88,126.7,74.418,94.376,35.514,54.023,115.57,213.98,55.346,22.545,2.8016,278.73,245.54,43.381,258.93,58.267,43.258,245.21,52.138,20.818,48.579,5.321,68.082,25.51,13.63,110.83,185.66,141.66,358.27,158.26,54.518,280.1,266.82,31.552,169.35,105.42,146.47,154.89,313.65,254.61,5.147,8.8501,85.318,215.38,333.43,120.39,159.49,35.69,257.45,259.79,281.69,339.14,17.125,288.13,168.04,100.49,16.1,283.52,323.68,279.25,301.48,123.99,68.829,136.24,92.28,7.7268,105.58,86.552,72.932,125.36,193.37,44.753,69.386,175.9,146.52,264.57,107.97,290.57,328.92,275.44,120.32,258.96,12.094,221.62,40.387,18.217,19.876,9.4391,343.96,189.08,272.25,212.33,266.01,114.99,305.33,177.71,41.341,292.42,240.06,137.44,258.77,150.71,20.136,210.6,107.58,147.44,210.99,113.62,53.049,356.95,38.698,120.33,13.665,332.07,134.33,356.1,195.64,202.79,67.644,77.578,174.71,79.02,337.27,99.945,343.12,293.38,125.86,7.7782,122.76,138.38,33.584,348.93,68.416,59.263,182.53,182.97,18.532,132.12,210.53,358.11,156.65,250.56,5.9312,54.914,323.83,16.695,10.558,206.8,122.55,78.948,325.44,245.91,133.79,144.4,73.789,85.572,318.37,331.65,281.39,87.09,210.09,72.668,45.744,247.56,327.87,270.34,296.25,81.044,139.23,150.73,336.88,38,191.26,223.63,100.92,71.195,147.02,130.54,58.285,321.67,158.57,241.31,75.754,169.61,17.969,178.54,97.1,246.3,269.28,140.99,201.18,263.61,220.18};
    int ns = sizeof(slon) / sizeof(float);
    for (int s = 0; s < ns; ++s) {
        slon[s] *= DEG2RAD;
        slat[s] *= DEG2RAD;
    }
    std::vector<float> image(ns * 2); // Beam pattern real & imaginary values.

    srand(10);
    FILE* output = fopen("output.dat", "w");
    float freq = 400; // MHz.
    for (int station = 0; station < 50; ++station) {
        // Generate array of antenna positions.
        int seed = rand();
        float radius = 28.5; // metres.
        float xs = 1.5, ys = 1.5, xe = 0.3, ye = 0.3; // separations, errors.

        int na = oskar_GridPositions::circular(seed, radius, xs, ys, xe, ye);
        printf("Satellite-station %d contains %d antennas.\n", station, na);
        std::vector<float> ax(na), ay(na), az(na); // Antenna positions.
        oskar_GridPositions::circular(seed, radius, xs, ys, xe, ye, &ax[0], &ay[0]);

        // Write antenna positions to file.
        char fname[200];
        sprintf(fname, "arraySatStation%02d.dat", station);
        FILE* file = fopen(fname, "w");
        for (int a = 0; a < na; ++a) {
            fprintf(file, "%12.3f%12.3f\n", ax[a], ay[a]);
        }
        fclose(file);

        // Call CUDA beam pattern generator.
        TIMER_START
        oskar_cudaf_bp2hc(na, &ax[0], &ay[0], ns, &slon[0],
                &slat[0], beamAz * DEG2RAD, beamEl * DEG2RAD,
                2 * M_PI * (freq * 1e6 / C_0), 0, 0, 1.0f, 0.0f, &image[0]);
        TIMER_STOP("Finished beam points (station %d)", station);

        // Write image data to file.
        for (int s = 0; s < ns; ++s) {
            fprintf(output, "%14.5f%14.5f%17.5e%17.5e\n",
                    slon[s] * RAD2DEG, slat[s] * RAD2DEG,
                    image[2*s], image[2*s+1]);
        }
    }

    // Do the same for the super-station.
    // Generate array of antenna positions.
    int seed = rand();
    float radius = 21.2; // metres.
    float xs = 0.375, ys = 0.375, xe = 0.0, ye = 0.0; // separations, errors.

    int na = oskar_GridPositions::circular(seed, radius, xs, ys, xe, ye);
    printf("Super-station contains %d antennas.\n", na);
    std::vector<float> ax(na), ay(na), az(na); // Antenna positions.
    oskar_GridPositions::circular(seed, radius, xs, ys, xe, ye, &ax[0], &ay[0]);

    // Write antenna positions to file.
    FILE* file = fopen("arraySupStation.dat", "w");
    for (int a = 0; a < na; ++a) {
        fprintf(file, "%12.3f%12.3f\n", ax[a], ay[a]);
    }
    fclose(file);

    // Call CUDA beam pattern generator.
    TIMER_START
    oskar_cudaf_bp2hc(na, &ax[0], &ay[0], ns, &slon[0],
            &slat[0], beamAz * DEG2RAD, beamEl * DEG2RAD,
            2 * M_PI * (freq * 1e6 / C_0), 0, 0, 1.0f, 0.0f, &image[0]);
    TIMER_STOP("Finished beam points (super-station)");

    // Write image data to file.
    for (int s = 0; s < ns; ++s) {
        fprintf(output, "%14.5f%14.5f%17.5e%17.5e\n",
                slon[s] * RAD2DEG, slat[s] * RAD2DEG,
                image[2*s], image[2*s+1]);
    }
    fclose(output);
}

/**
 * @details
 * Tests beam pattern creation using CUDA.
 */
void CudaBeamPatternTest::test_perturbed()
{
    // Generate array of antenna positions.
    int seed = 10;
    float radius = 15; // metres. (was 125)
    float xs = 1.4, ys = 1.4, xe = 0.3, ye = 0.3; // separations, errors.

    int na = oskar_GridPositions::circular(seed, radius, xs, ys, xe, ye);
    std::vector<float> ax(na), ay(na), az(na); // Antenna positions.
    oskar_GridPositions::circular(seed, radius, xs, ys, xe, ye, &ax[0], &ay[0]);

    // Rotate around z.
    float matrix[9];
    Matrix3::rotationZ(matrix, float(0 * DEG2RAD));
    Matrix3::transformPoints(matrix, na, &ax[0], &ay[0], &az[0]);

    // Write antenna positions to file.
    FILE* file = fopen("arrayRandom.dat", "w");
    for (int a = 0; a < na; ++a) {
        fprintf(file, "%12.3f%12.3f\n", ax[a], ay[a]);
    }
    fclose(file);

    // Set beam direction.
    float beamAz = 0;  // Beam azimuth.
    float beamEl = 90; // Beam elevation.

    // Generate test source positions for a square image.
//    SphericalPositions<float> pos (
//            beamAz * DEG2RAD, beamEl * DEG2RAD, // Centre.
//            30 * DEG2RAD, 30 * DEG2RAD, // Half-widths.
//            0.2 * DEG2RAD, 0.2 * DEG2RAD); // Spacings.

    // Generate test source positions for the hemisphere.
    oskar_SphericalPositions<float> pos (
            180 * DEG2RAD, 45 * DEG2RAD, // Centre.
            180 * DEG2RAD, 45 * DEG2RAD, // Half-widths.
            //0.03 * DEG2RAD, 0.03 * DEG2RAD, // Spacings.
            0.2 * DEG2RAD, 0.2 * DEG2RAD, // Spacings.
            0.0, true, false, true, true,
            oskar_SphericalPositions<float>::PROJECTION_NONE);

    int ns = 1 + pos.generate(0, 0); // No. of sources (add a point at zenith).
    std::vector<float> slon(ns), slat(ns);
    slon[0] = 0; slat[0] = 90 * DEG2RAD; // Add a point at zenith.
    pos.generate(&slon[1], &slat[1]); // Add a point at zenith.
    std::vector<float> image(ns * 2); // Beam pattern real & imaginary values.

    // Call CUDA beam pattern generator.
    int nf = 7; // Number of frequencies.
    float freq[] = {70, 115, 150, 200, 240, 300, 450}; // Frequencies in MHz.
    for (int f = 0; f < nf; ++f) {
        TIMER_START
        oskar_cudaf_bp2hc(na, &ax[0], &ay[0], ns, &slon[0],
                &slat[0], beamAz * DEG2RAD, beamEl * DEG2RAD,
                2 * M_PI * (freq[f] * 1e6 / C_0), 0, 0, 1.0f, 0.0f, &image[0]);
        TIMER_STOP("Finished beam pattern (%.0f MHz)", freq[f]);

        // Write image data to file.
        char fname[200];
        sprintf(fname, "beamPattern_%.0f.dat", freq[f]);
        file = fopen(fname, "w");
        for (int s = 0; s < ns; ++s) {
            fprintf(file, "%12.3f%12.3f%16.4e%16.4e\n",
                    slon[s] * RAD2DEG, slat[s] * RAD2DEG, image[2*s], image[2*s+1]);
        }
        fclose(file);
    }
}

/**
 * @details
 * Tests beam pattern creation using CUDA.
 */
void CudaBeamPatternTest::test_scattered()
{
    // Generate array of antenna positions.
    int seed = 10;
    float radius = 15; // metres. (was 125)
    float xs = 1.4, ys = 1.4, xe = 0.3, ye = 0.3; // separations, errors.

    int na = oskar_GridPositions::circular(seed, radius, xs, ys, xe, ye);
    std::vector<float> ax(na), ay(na), az(na); // Antenna positions.
    oskar_GridPositions::circular(seed, radius, xs, ys, xe, ye, &ax[0], &ay[0]);

    // Rotate around z.
    float matrix[9];
    Matrix3::rotationZ(matrix, float(0 * DEG2RAD));
    Matrix3::transformPoints(matrix, na, &ax[0], &ay[0], &az[0]);

    // Write antenna positions to file.
    FILE* file = fopen("arrayRandomScattered.dat", "w");
    for (int a = 0; a < na; ++a) {
        fprintf(file, "%12.3f%12.3f\n", ax[a], ay[a]);
    }
    fclose(file);

    // Set beam direction.
    float beamAz = 0;  // Beam azimuth.
    float beamEl = 90; // Beam elevation.

//    SphericalPositions<float> pos (
//            beamAz * DEG2RAD, beamEl * DEG2RAD, // Centre.
//            30 * DEG2RAD, 30 * DEG2RAD, // Half-widths.
//            0.5 * DEG2RAD, 0.5 * DEG2RAD); // Spacings.
//    int ns = pos.generate(0, 0); // No. of sources.
//    std::vector<float> slon(ns), slat(ns);
//    pos.generate(&slon[0], &slat[0]);

    float slat[] = {1, 0.75, 1.3, 0.8,
            1.5708, 1.5621, 1.5533, 1.5446, 1.5359,
            1.5272, 1.5184, 1.5097, 1.5010};
    float slon[] = {-2.8304, -0.0655, -1.9320, -2.3682,
            0, 0, 0, 0, 0,
            0, 0, 0, 0};
    int ns = sizeof(slon) / sizeof(float);
    std::vector<float> image(ns * 2); // Beam pattern real & imaginary values.

    // Call CUDA beam pattern generator.
    int nf = 7; // Number of frequencies.
    float freq[] = {70, 115, 150, 200, 240, 300, 450}; // Frequencies in MHz.
    for (int f = 0; f < nf; ++f) {
        TIMER_START
        oskar_cudaf_bp2hc(na, &ax[0], &ay[0], ns, &slon[0],
                &slat[0], beamAz * DEG2RAD, beamEl * DEG2RAD,
                2 * M_PI * (freq[f] * 1e6 / C_0), 0, 0, 1.0f, 0.0f, &image[0]);
        TIMER_STOP("Finished beam pattern (%.0f MHz)", freq[f]);

        // Write image data to file.
        char fname[200];
        sprintf(fname, "beamPatternScattered_%.0f.dat", freq[f]);
        file = fopen(fname, "w");
        for (int s = 0; s < ns; ++s) {
            fprintf(file, "%12.3f%12.3f%16.4e%16.4e\n",
                    slon[s] * RAD2DEG, slat[s] * RAD2DEG, image[2*s], image[2*s+1]);
        }
        fclose(file);
    }
}

/**
 * @details
 * Tests beam pattern creation using CUDA.
 */
void CudaBeamPatternTest::test_random()
{
    // Set antenna positions.
    const int na = 1000;
    float ax[] = {13.108,17.494,11.439,0.045236,3.1559,8.5675,-19.412,3.0974,
            4.3002,-3.9595,4.0163,-14.938,-12.636,-17.871,12.924,17.174,
            -18.455,-20.459,-18.943,-18.994,5.1591,-18.886,2.7326,-0.68578,
            -5.2299,-13.875,-6.3902,-1.0571,-8.1681,-4.5398,23.639,10.079,
            -18.196,19.846,1.5362,13.309,-19.414,-8.6324,10.004,24.363,1.3876,
            10.889,12.182,-1.8697,29.08,7.3266,13.549,-0.29534,11.199,-29.109,
            -6.8505,-12.703,25.731,-4.1342,21.234,12.624,-1.6345,-5.4595,
            12.306,-30.126,-11.942,9.6346,-12.827,-1.0421,-17.158,-23.917,
            -3.7213,-11.152,22.581,20.217,20.707,27.17,0.69184,-4.8173,21.74,
            14.945,-17.868,-16.103,1.5318,-1.5637,-23.191,-23.075,-28.319,
            29.756,4.0069,-16.533,2.2065,13.389,-14.586,-20.334,-18.976,
            6.2746,-19.493,12.675,-2.787,4.7093,-5.7182,14.512,-2.385,-5.2762,
            9.831,-4.0804,1.6057,-24.437,-16.814,-10.653,20.262,-24.681,10.636,
            -19.972,10.522,18.033,9.3174,-9.2694,-0.34759,-9.1782,-18.452,
            -8.6579,25.563,-19.501,-25.289,21.926,-6.9708,-2.4275,11.484,
            1.8635,-7.7361,9.807,-10.641,6.8508,0.36013,25.176,2.9751,18.897,
            -16.264,-9.5607,-16.362,16.99,2.9189,2.5297,1.2975,-12.685,16.505,
            -10.681,-15.251,30.122,9.3571,1.6246,-23.115,18.648,-7.9549,
            -3.5373,-1.6087,-17.785,7.915,-4.9557,4.6452,-6.7423,8.8011,
            -16.076,-16.776,15.903,-13.266,11.66,-5.0133,15.179,-10.575,1.0244,
            -21.857,11.139,6.3417,-7.2734,-14.761,-22.259,-12.499,3.0496,
            -24.48,7.1322,-17.949,-20.207,8.8793,-22.624,9.2697,27.861,-24.964,
            -11.645,-5.0482,17.106,22.697,14.615,1.5834,5.4982,24.016,18.679,
            22.23,-16.375,7.0268,-26.716,8.325,6.1947,16.112,-25.442,16.39,
            20.551,3.6707,-0.44698,19.625,13.572,-10.457,21.724,0.93623,
            -7.6223,-8.8549,11.388,12.822,-13.844,27.444,-5.7453,-30.236,
            6.5793,29.878,-0.93347,1.6933,7.0512,-29.401,17.274,-1.7302,
            -8.9968,6.5303,5.9513,10.255,4.6376,-8.6336,-29.72,-8.6845,3.8079,
            -26.416,-12.957,24.044,-14.389,4.8435,21.97,-0.22124,-16.337,
            18.765,-19.508,-12.926,16.263,3.4985,-19.068,-21.819,-3.6772,
            11.334,-2.265,-13.082,5.5519,22.724,20.681,13.036,-3.3874,9.0086,
            -22.187,11.247,-22.066,18.218,24.919,-0.79931,-7.4455,6.7908,
            26.726,-7.0493,12.235,10.447,-18.128,-0.39062,10.162,6.138,24.067,
            -17.349,13.633,-6.3685,21.714,9.0837,0.13083,18.369,26.647,6.4701,
            4.3847,28.409,-24.586,-15.353,-11.231,-12.127,-23.083,-25.603,
            20.529,18.022,-1.1877,28.951,-10.236,-4.0037,9.8001,-6.1027,
            5.2548,18.946,12.977,-6.7395,8.2169,-4.0338,-23.576,3.6372,-18.012,
            3.5259,11.37,17.376,-23.429,8.1147,-21.751,7.9547,-15.423,-15.318,
            18.016,2.3078,-2.5025,-24.26,-15.724,-23.273,-2.0643,-14.096,
            -16.465,-13.965,27.327,5.5578,-6.5539,-9.4858,20.371,22.624,
            -18.987,20.133,1.9588,0.70325,-8.214,12.691,6.6837,-0.54709,4.0904,
            4.5086,1.7492,12.889,13.013,7.2469,-27.605,28.553,18.398,-15.181,
            -7.1849,-27.407,15.2,0.18912,6.1706,13.165,6.2674,-26.339,28.545,
            19.436,-30.364,8.3022,-10.307,-4.9257,4.4101,-8.7508,-12.781,
            -1.8134,-17.765,-1.8925,-10.049,-5.7675,15.321,-21.626,11.778,
            -3.8186,-11.472,24.06,-15.177,-12.445,15.614,-10.142,-6.2095,
            28.528,-10.372,13.695,-0.48431,-1.5441,-15.974,-22.043,20.84,
            24.867,28.678,15.1,26.193,-20.166,-2.9035,2.5353,-27.342,-0.78547,
            -3.0536,-19.269,-10.88,17.002,14.014,-22.793,-1.4858,20.363,
            -16.764,6.4684,-16.857,-11.508,-21.437,3.5769,2.4965,-14.962,
            -7.5148,-15.049,27.524,-4.2154,-5.0419,19.051,12.51,-5.6214,
            -17.468,-10.178,22.589,29.566,-9.1384,-11.17,-10.977,-16.151,
            -12.354,0.35914,15.282,0.53614,-6.4482,5.0545,-18.512,1.8056,
            -3.4921,-15.746,-20.133,-10.779,2.8723,22.767,-9.3555,-3.6453,
            17.765,26.039,1.8974,-13.097,17.378,-25.373,-17.086,11.397,9.5251,
            28.271,30.397,-8.3233,17.203,-4.4884,17.297,-9.2103,8.011,4.8758,
            -7.3195,10.781,-4.9999,-14.373,-9.5479,-12.682,16.987,2.377,
            11.654,4.1822,-16.679,-6.4059,-21.131,24.106,-2.9503,-7.391,-3.079,
            -27.008,21.149,-27.539,-8.8649,-29.573,-20.748,4.9365,10.82,16.915,
            1.9984,-7.8024,-14.226,27.949,-11.325,-24.697,-22.441,23.795,
            -2.5735,-17.242,25.742,23.096,24.24,-0.89987,-29.241,-11.079,
            -28.795,4.4364,-5.6378,-23.965,-11.863,7.4577,8.3188,-28.173,
            12.326,0.94009,1.0734,15.91,-21.915,16.037,1.9617,-23.626,23.405,
            7.3621,16.92,22.664,-22.809,-11.267,-13.133,22.464,-14.098,-18.611,
            -20.038,-17.695,0.95318,13.704,-27.378,-21.834,14.449,-2.2727,
            4.9857,-9.8942,-18.098,19.334,19.462,-17.64,15.572,-5.4358,17.261,
            1.7816,-10.562,-20.326,25.333,19.572,-11.549,11.275,-27.386,20.02,
            14.154,26.229,-27.938,14.564,3.5777,19.007,3.3197,8.5543,14.905,
            -26.16,-2.6075,-5.2749,-7.3014,-4.8659,-3.2928,-8.3597,2.1128,
            -7.4388,-13.173,-26.843,-0.35411,-14.5,9.4291,16.989,-23.792,
            -21.109,-5.5338,5.4035,-14.71,-19.622,14.528,-1.8836,18.822,
            -20.205,24.381,21.498,-25.82,7.1083,3.8021,21.696,-14.927,8.6443,
            28.531,18.007,-16.72,7.3163,26.605,-13.103,1.7875,15.294,-24.37,
            -27.542,9.0517,-6.8166,-10.117,15.018,-1.6329,-25.379,-14.138,
            5.0343,-6.5733,-14.688,25.706,13.476,-0.96419,0.63346,-6.8077,
            -25.168,8.6056,14.19,6.5561,21.955,9.7443,0.023613,11.081,-25.882,
            10.086,-23.957,0.0062583,-14.655,-1.7246,24.9,23.247,-6.3182,
            19.596,0.69035,3.1592,-5.5326,26.507,6.9482,-20.457,-28.721,4.1633,
            -10.4,-13.158,5.7674,18.274,-5.4832,14.777,20.075,-2.1944,-12.229,
            -11.233,-8.9535,9.1794,14.132,-14.083,-2.4669,11.575,13.135,
            -15.085,-22.387,-10.176,0.087708,-21.844,-13.203,-5.4296,12.964,
            14.937,6.207,-2.3167,15.657,-0.1873,8.5845,7.7324,-23.942,-7.2328,
            20.857,4.5767,-19.574,-17.115,-20.575,19.99,-9.71,9.911,16.497,
            -0.2271,-21.98,3.5615,-3.6499,20.21,-3.4435,-14.104,16.506,10.336,
            22.079,-12.608,3.6169,11.589,-8.5259,6.0106,6.9391,2.444,23.825,
            6.7434,21.578,-3.6147,-10.352,1.0055,-7.2824,26.801,-14.107,-16.69,
            1.5715,-12.328,8.5688,-21.75,11.348,8.8118,8.4808,-13.218,-12.667,
            0.46249,-4.6954,7.5084,-14.168,25.663,-9.39,-19.013,-11.327,8.2377,
            24.447,-5.0358,2.8146,-0.073031,0.69014,15.834,-1.2638,-5.7243,
            3.1316,4.8138,-3.4639,-14.502,-16.472,-16.036,-4.2474,-8.1484,
            10.148,-21.17,-17.787,4.3649,0.13287,5.4449,9.3467,-1.2546,18.638,
            -10.367,4.8638,-19.12,9.3093,13.603,20.482,10.502,10.483,2.0457,
            23.583,-8.0246,13.181,-1.8788,2.7924,2.6808,10.423,-26.943,-3.4983,
            -26.021,-30.155,-26.233,8.4594,-25.906,-19.991,15.437,-23.433,
            -11.527,-3.3603,24.618,26.583,-12.295,16.752,-8.3683,14.862,20.692,
            -1.4169,24.366,12.411,-4.0553,4.4033,5.741,25.04,18.488,15.997,
            -1.9267,9.8203,-8.6444,-11.104,-21.942,11.38,-4.0408,14.186,
            -16.002,24.865,-4.861,-23.577,-20.169,13.908,17.126,9.3817,6.6203,
            -1.2634,19.954,-20.469,-17.688,27.316,-21.767,3.7934,21.901,
            -13.312, -18.973,-6.6497,-21.384,-20.397,14.868,-24.795,11.594,
            -4.1199,11.011,17.973,-27.846,-20.547,-16.199,20.844,-16.199,
            -21.882,-9.6521,3.3977,-25.816,-24.981,19.726,-2.1152,8.6703,
            -14.935,6.5794,18.26,23.382,15.172,17.139,11.61,14.337,-26.155,
            -5.9017,-14.993,-14.245,9.6406,17.334,12.17,22.054,-2.7985,
            23.493,21.971,-9.8148,8.7599,-19.605,-19.042,-4.2326,-13.298,
            22.258,-8.3434,25.8,2.0918,-18.062,-2.5575,15.423,-3.7156,27.155,
            -8.6706,-11.775,5.273,-15.791,7.471,26.636,-12.217,-28.86,12.319,
            8.3502,18.218,21.306,21.688,16.715,10.195,11.868,-7.2163,23.127,
            -17.455,3.4575,-2.3981,-7.7589,-9.2027,3.1589,-28.355,-0.35433,
            4.9682,2.7841,3.1387,25.251,0.017842,18.954,14.987,-14.418,-6.3241,
            22.929,-28.634,-15.263,12.689,8.1253,-15.676,15.854,-11.592,
            -22.895,-21.849,1.0291,-26.035,-23.749,-2.8952,-15.626,8.1002,
            7.1529,24.904,-8.9311,-14.288,20.122,18.929,7.3783,24.451,6.0265,
            1.3711,27.671,16.127,5.7223,-3.5682,-12.19,13.114,-8.0129,23.553,
            -6.5719,-13.284,13.873,-7.8314,1.3801,-20.876,17.986,-20.765,
            -26.588,-28.059,-27.316,-9.254,10.492,-1.0466,-6.3671,20.879,
            26.419,-23.215,11.844,20.889,-18.655,-8.6346,-8.8656,0.22355,
            -20.803,-4.9385,16.276,-4.0271,27.906,0.7501,-10.497,27.227,
            29.139};
    float ay[] = {10.024,-13.319,13.565,22.288,27.986,22.775,4.5243,29.567,
            10.459,-4.9821,-24.313,-22.38,-20.057,11.117,2.1907,18.026,-22.008,
            -3.9055,16.634,19.061,-6.5986,-11.243,-13.33,-25.388,-16.09,13.462,
            -20.543,7.1935,-14.022,21.517,7.6922,23.143,23.061,-17.743,-10.374,
            15.071,21.691,-6.2786,-6.8376,1.9431,12.929,-18.872,11.384,2.973,
            3.1144,15.71,-12.163,17.65,-23.175,2.2573,-7.7683,26.439,-4.5596,
            11.619,-6.8529,-5.3059,19.697,-0.6073,-2.2266,-4.2685,-26.932,
            -0.0080816,-22.871,12.48,-4.1949,-7.9407,2.2863,24.968,-0.67086,
            -4.8362,-10.39,0.50135,4.3139,-30.044,10.431,22.43,4.3754,14.188,
            -22.786,-20.592,15.111,1.645,-5.0845,-3.9736,1.1873,-9.8614,
            0.14716,5.2498,-10.452,-1.3404,1.5482,-15.816,-2.7583,0.74123,
            21.999,-1.786,19.105,-10.809,13.802,5.217,-21.306,-6.6987,-11.967,
            -15.345,-1.6553,-21.24,21.547,8.2627,-13.763,-5.2649,-25.269,
            10.466,18.211,-12.064,0.47821,-15.728,20.498,-4.4533,-7.7114,
            -16.717,-10.544,2.8867,-0.84908,-24.073,27.285,16.568,-9.0916,
            6.0672,-8.0827,12.888,25.623,5.0696,2.4308,14.372,18.307,12.06,
            25.647,0.43562,-18.426,20.837,-26.212,21.226,-20.856,2.9221,6.8708,
            -0.91286,9.5908,-1.7907,9.9982,5.8286,2.1714,19.476,23.301,-20.012,
            3.1625,-19.697,27.548,26.464,11.8,-11.625,16.932,-1.5498,-18.559,
            -27.777,-2.7716,14.274,0.97908,-3.1482,-3.0731,4.8699,5.8067,
            18.109,-1.7923,-5.9309,14.674,24.874,2.5911,8.0711,-16.779,-7.7852,
            -26.197,12.125,16.093,-5.0506,-13.245,-24.231,25.667,-10.724,
            -17.068,9.993,-16.932,-25.735,14.396,-11.813,13.627,1.9039,19.114,
            -0.25199,5.9283,-5.5305,8.4402,4.4781,11.659,15.705,8.7857,-9.3251,
            9.039,-4.0953,15.498,-11.563,-8.8557,-3.2157,6.1454,7.9998,7.3066,
            -13.557,3.7942,-6.0587,-0.33991,0.94585,4.4338,-6.2791,-14.922,
            -1.3273,7.7663,-15.842,10.783,20.038,-22.334,23.929,24.789,23.349,
            -26.008,-6.2158,-21.161,-22.301,2.947,2.7421,-4.5833,-24.072,
            -20.966,-2.4464,-28.309,21.451,16.535,-14.886,24.382,26.067,5.491,
            8.2021,5.7026,4.008,22.149,-0.052007,-5.1445,15.692,4.1142,-14.593,
            26.219,17.034,-5.5304,-18.74,-20.484,-14.881,-17.476,-1.8943,
            -26.923,15.764,-11.668,-9.3862,-28.343,-14.548,-3.0931,-14.029,
            15.375,1.5931,25.897,16.381,-8.6631,-22.212,-25.2,8.8607,26.491,
            -15.148,1.151,7.9167,11.121,16.604,-8.6179,9.7801,16.491,-18.681,
            -14.604,-10.734,6.5109,7.8614,12.213,25.305,-6.475,-23.145,-9.8921,
            13.989,14.331,3.4093,-22.198,23.296,11.84,-27.982,-23.024,4.5984,
            -0.33415,-23.705,-26.111,16.456,-22.999,16.607,-23.615,-13.079,
            -7.129,9.9315,-4.2838,-24.399,-19.799,6.7601,13.207,-13.756,
            -4.7243,-8.5999,-21.052,23.93,-27.34,-1.9434,-9.2398,-4.6459,
            -19.925,12.765,-14.261,6.6067,0.084278,18.984,11.522,14.096,21.266,
            -27.491,30.111,-10.31,7.3169,1.6316,17.016,19.003,28.313,-2.1816,
            1.4684,-7.4547,20.131,28.637,11.996,-7.7731,-19.445,20.796,-8.9832,
            -13.38,-5.435,-10.212,-19.264,-2.6431,-9.1843,9.6124,-7.9035,
            13.862,-28.569,16.496,26.922,13.44,-11.581,-10.433,-9.9126,5.6339,
            -10.547,-11.025,27.336,-6.8576,10.875,22.285,1.3556,1.4793,26.485,
            3.2455,8.1411,22.628,-24.359,-21.754,1.374,-19.448,-8.2941,20.131,
            -14.825,10.574,-26.392,12.702,0.27793,-29.433,-8.0335,-11.862,
            21.058,29.818,12.678,-15.502,21.872,-15.248,8.2477,-2.2059,-8.8022,
            -17.703,-17.345,20.03,8.5922,-16.938,-29.927,14.877,12.38,20.057,
            23.722,-6.722,0.20162,7.6367,18.118,-7.5651,-14.395,8.9545,-27.432,
            16.647,-2.5057,-24.177,21.275,13.045,4.4562,-12.21,9.0715,24.275,
            -29.543,-12.638,19.343,-7.2799,26.994,-21.199,-7.7721,-9.9908,
            18.583,-2.59,-10.55,17.394,-12.579,-4.7582,6.4241,-28.092,-9.528,
            13.504,-8.6568,-12.806,-15.973,3.1841,5.6213,1.4328,22.977,20.241,
            24.32,-3.0911,-1.9473,17.122,29.135,-19.009,12.089,-24.154,1.1616,
            -17.697,9.7753,24.208,-25.242,-0.42112,-4.0221,-6.5596,22.846,
            11.935,-7.6772,-15.923,9.8321,-26.563,8.2205,-19.71,6.6901,21.619,
            3.7256,1.626,4.9296,-8.5432,-18.508,8.7732,-16.999,8.1004,-3.5956,
            11.173,-18.012,19.571,-13.156,-17.5,6.8553,0.43965,-8.8975,17.799,
            4.8089,-1.6505,16.938,-9.0949,25.365,16.7,-12.121,-3.5057,4.7904,
            25.137,-7.5237,-25.427,-5.3325,21.211,-9.5996,4.1505,-24.863,
            5.6575,18.127,12.636,-2.9062,5.3072,-18.621,-16.192,-9.3862,
            -6.6123,-3.9696,18.996,-4.3561,-12.169,18.235,30.057,12.701,5.1959,
            14.623,-17.941,-5.2564,-29.506,4.4358,-0.49957,-13.457,-20.846,
            15.118,-19.535,29.324,3.8369,-6.6426,-25.861,17.719,9.7166,-15.825,
            -16.83,17.918,-9.8313,3.1957,0.98036,-0.98287,0.70216,7.8956,
            -16.54,20.093,12.911,-14.986,20.034,-14.653,25.006,27.177,-21.694,
            13.582,8.1302,26.478,23.709,5.663,5.8312,14.794,13.898,14.97,
            -10.121,-6.6003,6.013,8.2368,-18.339,-18.662,5.2969,-19.62,17.238,
            15.478,-10.152,15.487,-10.109,5.8366,-12.01,-25.281,3.6273,18.983,
            -15.37,21.111,-0.99786,7.9058,-22.391,26.752,-12.111,4.1888,
            -30.387,-22.682,-3.3932,10.149,-18.274,7.3964,7.1987,4.1832,
            -15.091,15.333,21.121,-12.068,-23.375,2.9649,2.6743,-19.804,
            -30.627,7.1309,-26.926,-0.66803,-13.248,-13.566,-19.829,-5.476,
            -1.6874,27.86,19.437,-3.8308,28.176,-1.7692,-17.817,-6.4342,
            -18.928,-6.4313,5.6871,21.068,23.152,-20.868,22.316,1.529,-3.1189,
            -9.7828,19.757,-3.3163,-13.609,-13.021,12.221,8.5269,-1.3021,
            -28.55,26.256,10.713,18.005,7.2783,5.9566,8.2438,-24.667,-0.90497,
            17.284,-10.18,10.068,-26.882,26.401,-1.0104,-0.68792,-1.8938,
            21.222,-2.9566,10.59,-16.433,-3.6399,17.751,-7.0334,-5.4748,-11.51,
            1.3788,9.7265,-6.2381,24.191,-1.1471,-15.354,-21.077,-15.529,6.833,
            -2.389,24.797,-28.997,14.969,-3.9497,16.21,19.058,-27.903,4.9045,
            -2.8589,-16.708,-12.028,-12.323,-15.735,22.864,26.543,2.9804,
            -0.62492,-23.974,22.145,-5.2138,0.10052,-7.9122,1.0919,9.8017,
            -5.4611,-13.508,-10.721,10.822,-7.9158,0.5093,28.539,-0.42838,
            -16.599,0.27411,6.3579,8.1633,-20.232,-24.956,19.361,24.069,
            -11.521,-4.6778,11.049,14.072,-8.9783,10.154,-28.28,14.208,3.7111,
            -12.924,11,2.5683,-24.398,18.792,-23.189,-22.071,-11.402,-27.942,
            23.26,-11.958,-25.46,-20.882,15.02,11.181,21.254,-19.887,-2.787,
            -8.0356,19.138,-0.24142,19.74,9.1877,21.711,-3.188,11.987,-18.176,
            4.5977,24.874,17.933,-5.0162,-17.443,3.5407,-2.7676,0.7261,3.6276,
            -28.233,7.0493,-23.707,-26.851,-8.3115,-1.3815,-1.9987,1.1451,
            -6.8611,-11.613,10.842,-22.508,-16.168,0.10161,-10.834,-19.558,
            -16.686,-13.808,-8.0441,6.842,4.3066,-20.932,-12.63,-13.533,
            -11.774,-18.506,-14.834,21.365,-4.1477,8.3104,24.435,-14.271,
            28.736,-15.879,-22.74,27.567,-21.456,-6.3613,-18.028,-6.567,
            -2.9128,12.108,-26.721,-13.877,2.9614,-2.3988,16.341,-8.1513,
            14.339,-16.618,1.5688,13.98,2.8933,9.4021,17.812,-19.924,12.042,
            -1.4895,-8.7974,-15.402,9.7143,-13.719,15.678,-4.8922,23.774,
            6.5342,14.931,-20.272,3.1765,-18.454,11.544,14.253,7.9815,2.7149,
            14.221,-28.381,1.0757,11.963,-6.2794,-3.5964,27.984,-25.651,2.5737,
            2.7866,-6.349,12.593,-8.5213,-4.0849,2.6263,12.972,9.0169,-18.176,
            -0.36609,-23.022,9.2025,-12.867,7.3933,12.364,9.1274,15.339,
            -14.401,-3.6347,23.482,14.366,18.2,-15.444,-20.712,-7.7896,-10.723,
            -21.462,-5.755,5.0594,-0.16112,-24.794,2.1666,28.285,-1.9626,
            1.9125,-23.684,-18.384,5.1228,17.922,6.0071,-21.523,-0.65968,
            -14.668,-17.535,-8.2583,2.4984,10.765,25.387,-6.0251,19.079,
            -11.154,-6.5084,-22.217,-24.623,3.0799,17.368,8.7562,10.332,
            -17.105,-9.5518,-14.76,-13.032,-7.632,-3.8802,-12.249,-19.515,
            -17.049,1.7959,-11.078,-9.157,-23.31,-29.602,-0.63276,-17.549,
            4.2241,13.658,-4.5302,15.146,9.3136,-9.4543,-13.91,-16.772,-21.747,
            -14.5,-3.3249,15.969,25.131,6.334,4.1464,23.844,6.4916,-2.3736,
            -18.532,6.9178,10.135,-10.661,-8.4597,-21.516,-10.418,12.621,
            -15.498,0.5225,-11.066,11.273,-12.281,10.145,-6.4771,22.995,22.21,
            -13.218,-0.768,-3.6878,1.5302,26.23,-0.83762,-2.2906,-3.5513,
            -5.8143,-17.589,-9.5392,-21.139,-12.661,18.646,9.8076,5.7163,
            -15.577,22.901,-4.1755,28.766,11.846,-0.49244,20.005,-10.785,
            6.8169};

    // Generate test source positions.
    float beamAz = 0;  // Beam azimuth.
    float beamEl = 50; // Beam elevation.
    oskar_SphericalPositions<float> pos (
            beamAz * DEG2RAD, beamEl * DEG2RAD, // Centre.
            30 * DEG2RAD, 30 * DEG2RAD, // Half-widths.
            0.1 * DEG2RAD, 0.1 * DEG2RAD); // Spacings.
    unsigned ns = pos.generate(0, 0); // No. of sources.
    std::vector<float> slon(ns), slat(ns);
    pos.generate(&slon[0], &slat[0]);

    // Call CUDA beam pattern generator.
    float freq = 1e9; // Observing frequency, Hertz.
    std::vector<float> image(ns * 2); // Beam pattern real & imaginary values.
    TIMER_START
    oskar_cudaf_bp2hc(na, ax, ay, ns, &slon[0],
            &slat[0], beamAz * DEG2RAD, beamEl * DEG2RAD,
            2 * M_PI * (freq / C_0), 0, 0, 1.0f, 0.0f, &image[0]);
    TIMER_STOP("Finished beam pattern (1000 element random array, %d points)",
            ns);

    // Write image data to file.
    FILE* file = fopen("beamPattern2dHorizontalGeometricRandom.dat", "w");
    for (unsigned s = 0; s < ns; ++s) {
        fprintf(file, "%12.3f%12.3f%16.4e%16.4e\n",
                slon[s] * RAD2DEG, slat[s] * RAD2DEG, image[2*s], image[2*s+1]);
    }
    fclose(file);
}

/**
 * @details
 * Tests beam pattern creation using CUDA.
 */
void CudaBeamPatternTest::test_single_precision()
{
    // Generate square array of antenna positions.
    const int na = 100;
    const float sep = 0.15; // Antenna separation, metres.
    const float halfArraySize = (na - 1) * sep / 2.0;
    std::vector<float> ax(na * na), ay(na * na); // Antenna (x,y) positions.
    for (int x = 0; x < na; ++x) {
        for (int y = 0; y < na; ++y) {
            int i = y + x * na;
            ax[i] = x * sep - halfArraySize;
            ay[i] = y * sep - halfArraySize;
        }
    }

    // Generate test source positions.
    float beamAz = 0;  // Beam azimuth.
    float beamEl = 50; // Beam elevation.
    oskar_SphericalPositions<float> pos (
            beamAz * DEG2RAD, beamEl * DEG2RAD, // Centre.
            30 * DEG2RAD, 30 * DEG2RAD, // Half-widths.
            0.2 * DEG2RAD, 0.2 * DEG2RAD); // Spacings.
    unsigned ns = pos.generate(0, 0); // No. of sources.
    std::vector<float> slon(ns), slat(ns);
    pos.generate(&slon[0], &slat[0]);

    // Call CUDA beam pattern generator.
    float freq = 1e9; // Observing frequency, Hertz.
    std::vector<float> image(ns * 2); // Beam pattern real & imaginary values.
    TIMER_START
    oskar_cudaf_bp2hc(na*na, &ax[0], &ay[0], ns, &slon[0],
            &slat[0], beamAz * DEG2RAD, beamEl * DEG2RAD,
            2 * M_PI * (freq / C_0), 0, 0, 1.0f, 0.0f, &image[0]);
    TIMER_STOP("Finished beam pattern (single precision)");
}

/**
 * @details
 * Tests beam pattern creation using CUDA.
 */
void CudaBeamPatternTest::test_double_precision()
{
    // Generate square array of antenna positions.
    const int na = 100;
    const double sep = 0.15; // Antenna separation, metres.
    const double halfArraySize = (na - 1) * sep / 2.0;
    std::vector<double> ax(na * na), ay(na * na); // Antenna (x,y) positions.
    for (int x = 0; x < na; ++x) {
        for (int y = 0; y < na; ++y) {
            int i = y + x * na;
            ax[i] = x * sep - halfArraySize;
            ay[i] = y * sep - halfArraySize;
        }
    }

    // Generate test source positions.
    double beamAz = 0;  // Beam azimuth.
    double beamEl = 50; // Beam elevation.
    oskar_SphericalPositions<double> pos (
            beamAz * DEG2RAD, beamEl * DEG2RAD, // Centre.
            30 * DEG2RAD, 30 * DEG2RAD, // Half-widths.
            0.2 * DEG2RAD, 0.2 * DEG2RAD); // Spacings.
    unsigned ns = pos.generate(0, 0); // No. of sources.
    std::vector<double> slon(ns), slat(ns);
    pos.generate(&slon[0], &slat[0]);

    // Call CUDA beam pattern generator.
    double freq = 1e9; // Observing frequency, Hertz.
    std::vector<double> image(ns * 2); // Beam pattern real & imaginary values.
    TIMER_START
    oskar_cudad_bp2hc(na*na, &ax[0], &ay[0], ns, &slon[0],
            &slat[0], beamAz * DEG2RAD, beamEl * DEG2RAD,
            2 * M_PI * (freq / C_0), 0, 0, 1.0f, 0.0f, &image[0]);
    TIMER_STOP("Finished beam pattern (double precision)");

    // Write image data to file.
    FILE* file = fopen("doublePrecision.dat", "w");
    for (unsigned s = 0; s < ns; ++s) {
        fprintf(file, "%12.3f%12.3f%16.4e%16.4e\n",
                slon[s] * RAD2DEG, slat[s] * RAD2DEG, image[2*s], image[2*s+1]);
    }
    fclose(file);
}

/**
 * @details
 * Tests beam pattern creation using CUDA.
 */
void CudaBeamPatternTest::test_single_precision_precomputed()
{
    // Generate square array of antenna positions in wavenumbers.
    float freq = 1e9; // Observing frequency, Hertz.
    float k = 2 * M_PI * (freq / C_0);
    const int na = 100;
    const float sep = 0.15; // Antenna separation, metres.
    const float halfArraySize = (na - 1) * sep / 2.0;
    std::vector<float> ax(na * na), ay(na * na); // Antenna (x,y) positions.
    for (int x = 0; x < na; ++x) {
        for (int y = 0; y < na; ++y) {
            int i = y + x * na;
            ax[i] = k * x * sep - halfArraySize;
            ay[i] = k * y * sep - halfArraySize;
        }
    }

    // Generate test source positions.
    float beamAz = 0;  // Beam azimuth.
    float beamEl = 50; // Beam elevation.
    oskar_SphericalPositions<float> pos (
            beamAz * DEG2RAD, beamEl * DEG2RAD, // Centre.
            30 * DEG2RAD, 30 * DEG2RAD, // Half-widths.
            0.2 * DEG2RAD, 0.2 * DEG2RAD); // Spacings.
    unsigned ns = pos.generate(0, 0); // No. of sources.
    std::vector<float> az(ns), el(ns), cace(ns), sace(ns);
    pos.generate(&az[0], &el[0]);
    for (unsigned i = 0; i < ns; ++i) {
        float ce = cos(el[i]);
        cace[i] = cos(az[i]) * ce;
        sace[i] = sin(az[i]) * ce;
    }

    // Call CUDA beam pattern generator.
    std::vector<float> image(ns * 2); // Beam pattern real & imaginary values.
    TIMER_START
    oskar_cudaf_bp2phc(na*na, &ax[0], &ay[0], ns, &cace[0], &sace[0],
            beamAz * DEG2RAD, beamEl * DEG2RAD, &image[0]);
    TIMER_STOP("Finished beam pattern (float precision, precomputed trig)");
}

/**
 * @details
 * Tests beam pattern creation using CUDA.
 */
void CudaBeamPatternTest::test_double_precision_precomputed()
{
    // Generate square array of antenna positions in wavenumbers.
    double freq = 1e9; // Observing frequency, Hertz.
    double k = 2 * M_PI * (freq / C_0);
    const int na = 100;
    const double sep = 0.15; // Antenna separation, metres.
    const double halfArraySize = (na - 1) * sep / 2.0;
    std::vector<double> ax(na * na), ay(na * na); // Antenna (x,y) positions.
    for (int x = 0; x < na; ++x) {
        for (int y = 0; y < na; ++y) {
            int i = y + x * na;
            ax[i] = k * x * sep - halfArraySize;
            ay[i] = k * y * sep - halfArraySize;
        }
    }

    // Generate test source positions.
    double beamAz = 0;  // Beam azimuth.
    double beamEl = 50; // Beam elevation.
    oskar_SphericalPositions<double> pos (
            beamAz * DEG2RAD, beamEl * DEG2RAD, // Centre.
            30 * DEG2RAD, 30 * DEG2RAD, // Half-widths.
            0.2 * DEG2RAD, 0.2 * DEG2RAD); // Spacings.
    unsigned ns = pos.generate(0, 0); // No. of sources.
    std::vector<double> az(ns), el(ns), cace(ns), sace(ns);
    pos.generate(&az[0], &el[0]);
    for (unsigned i = 0; i < ns; ++i) {
        double ce = cos(el[i]);
        cace[i] = cos(az[i]) * ce;
        sace[i] = sin(az[i]) * ce;
    }

    // Call CUDA beam pattern generator.
    std::vector<double> image(ns * 2); // Beam pattern real & imaginary values.
    TIMER_START
    oskar_cudad_bp2phc(na*na, &ax[0], &ay[0], ns, &cace[0], &sace[0],
            beamAz * DEG2RAD, beamEl * DEG2RAD, &image[0]);
    TIMER_STOP("Finished beam pattern (double precision, precomputed trig)");

    // Write image data to file.
    FILE* file = fopen("doublePrecisionPrecomputed.dat", "w");
    for (unsigned s = 0; s < ns; ++s) {
        fprintf(file, "%12.3f%12.3f%16.4e%16.4e\n",
                az[s] * RAD2DEG, el[s] * RAD2DEG, image[2*s], image[2*s+1]);
    }
    fclose(file);
}

