+------------------------------------------------------------------------------+
| OSKAR 2.2                                          Last update: 4 March 2013 |
+------------------------------------------------------------------------------+

1. Introduction
--------------------------------------------------------------------------------
The OSKAR simulation package can be built and installed by following the simple
steps described below. The build system makes use of CMake (www.cmake.org) and
is currently targeted at Linux and Mac OS X systems. Installation under
Microsoft Windows may be possible, but is not currently supported.


2. Dependencies
--------------------------------------------------------------------------------
OSKAR depends on a number of other libraries. The main components of OSKAR
require CUDA 4.0 or later and Qt 4.6 or later to be installed on the target
system, and also CBLAS and LAPACK for full functionality. Additionally, the
CFITSIO and casacore libraries must be present if FITS images and Measurement
Sets are to be exported. The MATLAB interface will be built if MATLAB R2010b
or later is found.

The unit tests require the CppUnit testing framework.

Please ensure that the required dependencies are installed before proceeding
further.

The OSKAR CMake build system will compile and install as many components as
possible according to the following dependencies being satisfied:

    * CUDA (>=4.0)
        - Required for: liboskar, liboskar_apps, Applications, MATLAB interface
    * Qt (>=4.6)
        - Required for: liboskar_apps, Applications
        - Optional for: MATLAB interface (for manipulation of OSKAR setting files)
    * CBLAS
        - Optional for: liboskar (to enable the use of extended sources)
    * LAPACK
        - Optional for: liboskar (to enable the use of extended sources)
    * CFITSIO
        - Required for: liboskar_fits
        - Optional for: liboskar_apps, Applications (for FITS file export)
    * casacore (>= 1.2.0)
        - Required for: liboskar_ms
        - Optional for: liboskar_apps, Applications (for Measurement Set export)
    * MATLAB (>=R2010b)
        - Required for: MATLAB interface.
    * CppUnit (1.12.1)
        - Required for: Unit testing binaries.
    * CMake (>=2.8)
        - Required for: Makefile generation.


3. Building OSKAR
--------------------------------------------------------------------------------
OSKAR can be built by issuing the following commands:

    $ mkdir build
    $ cd build
    $ cmake [OPTIONS] ../path/to/top/level/source/folder
    $ make

OSKAR can then be installed with:

    $ make install

3.1. Build Options
--------------------------------------------------------------------------------
When running the 'cmake' command a number of build options can be specified.
These are listed below.

    * -DCUDA_ARCH=<arch> (default: 2.0)
        Sets the target architecture for the compilation of CUDA device code.
        <arch> must be one of either: 1.3, 2.0, 2.1, 3.0 or ALL.
        (Note: 1.1 architecture may also work if running in single precision,
        although this architecture isn't officially supported by OSKAR.)

    * -DCMAKE_INSTALL_PREFIX=<path> (default: /usr/local/)
        Prefix install path used when installing OSKAR (with make install).

Advanced Build Options:

    * -DCMAKE_BUILD_TYPE=<release or debug> (default: release)
        Build OSKAR in release or debug mode.

    * -DLAPACK_LIB_DIR=<path> (default: searches the system library paths)
        Specifies a custom path in which to look for the LAPACK library
        (liblapack.so).
        NOTE: This should only be used in special cases, where the version
        of LAPACK installed in the system library path can't be used to build
        OSKAR.

    * -DCBLAS_LIB_DIR=<path> (default: searches the system library paths)
        Specifies a custom path in which to look for the CBLAS library
        (ATLAS: libcblas.so; GSL: libgslcblas.so).
        NOTE: This should only be used in special cases, where the version
        of CBLAS installed in the system library path can't be used to build
        OSKAR.

    * -DCFITSIO_LIB_DIR=<path> (default: searches the system library paths)
        Specifies a custom path in which to look for the CFITSIO library
        (libcfitsio.so).
        NOTE: This should only be used in special cases, where the version
        of CFITSIO installed in the system library path can't be used to build
        OSKAR.

    * -DCFITSIO_INC_DIR=<path> (default: searches the system include paths)
        Specifies a custom path in which to look for the CFITSIO library
        headers (fitsio.h and others).
        NOTE: This should only be used in special cases, where the version
        of CFITSIO headers installed in system include path can't be used to
        build OSKAR.

    * -DCPPUNIT_LIB_DIR=<path> (default: searches the system library paths)
        Specifies a custom path in which to look for the CPPUNIT library
        (libcppunit.so).
        Note: This should only be used in special cases, where the version of
        CPPUNIT installed in the system library path can't be used to build
        OSKAR.

    * -DCPPUNIT_INC_DIR=<path> (default: searches the system include paths)
        Specifies a custom path in which to look for the CPPUNIT library headers.
        This is the path to the top level cppunit include folder.
        Note: This should only be used in special cases, where the version of
        CPPUNIT headers installed in the system include path can't be used to
        build OSKAR.

    * -DCASACORE_LIB_DIR=<path> (default: searches the system library paths)
        Specifies a custom path in which to look for the CasaCore libraries
        (libcasa_ms.so and others).
        Note: This should only be used in special cases, where the version of
        CasaCore installed in the system library path can't be used to build
        OSKAR.

    * -DCASACORE_INC_DIR=<path> (default: searches the system include paths)
        Specifies a custom path in which to look for the CasaCore library headers.
        This is the path to the top level casacore include folder.
        Note: This should only be used in special cases, where the version of
        CasaCore headers installed in system include path can't be used to
        build OSKAR.


3.2. Environment Variables
--------------------------------------------------------------------------------
The following environment variables affect the CMake build system:

    * MATLAB_ROOT
        The MATLAB root install directory used by CMake when searching for the
        MATLAB dependency. This directory should contain the MATLAB 'extern'
        directory. (Note that this variable should not normally need to be set,
        but can be used if the default CMake macros fail to find MATLAB on your
        system.)

3.3. Custom (Non-System) Qt4 Installations
--------------------------------------------------------------------------------
When searching for a valid Qt4 installation, the OSKAR CMake build system
queries the qmake binary in order to determine the location of the relevant
libraries and headers. Therefore, all that is required to use a specific version
of Qt4 is to add the location of the desired qmake binary to the beginning of
the system search path.


4. Testing the Installation
--------------------------------------------------------------------------------

4.1 Unit Tests
--------------------------------------------------------------------------------
If OSKAR has been built with the CppUnit dependency present, a number of unit
test binaries will be created. These can be run by typing the following command
from the build directory:

    $ make test

All the unit tests should pass. If any fail, please report this by copying
the terminal output and sending it, together with a description of the hardware
in your machine, your operating system version and your version of OSKAR, to
the following email address:

    oskar@oerc.ox.ac.uk

4.2 Running the Example Simulation
--------------------------------------------------------------------------------
It is also advised, with any fresh install of OSKAR, to run the example
simulation described in the documentation found at

    http://www.oerc.ox.ac.uk/research/oskar2

to establish if a simple simulation behaves as expected.
